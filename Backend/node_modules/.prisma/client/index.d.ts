
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model users
 * 
 */
export type users = {
  userId: number
  FirstName: string
  LastName: string
  Address: string | null
  Email: string
  Password: string
  Role: Roles
}

/**
 * Model product
 * 
 */
export type product = {
  ProductId: number
  title: string
  Description: string | null
  Price: string
  img: string
  Store: string
  userId: number
  subatCagoryId: number
}

/**
 * Model cart
 * 
 */
export type cart = {
  cartId: number
  qty: number
  userId: number
  ProductId: number
}

/**
 * Model payment
 * 
 */
export type payment = {
  id: number
  userId: number
  createAt: number | null
  is_paid: boolean
  is_deliveredn: boolean
  ProductId: number
  cartId: number
}

/**
 * Model subCatagory
 * 
 */
export type subCatagory = {
  subatCagoryId: number
  type: string
  img: string
  CagoryId: number
  userId: number
}

/**
 * Model catagory
 * 
 */
export type catagory = {
  CagoryId: number
  type: string
  userId: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Roles: {
  SUPERADMIN: 'SUPERADMIN',
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type Roles = (typeof Roles)[keyof typeof Roles]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<GlobalReject>;

  /**
   * `prisma.cart`: Exposes CRUD operations for the **cart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carts
    * const carts = await prisma.cart.findMany()
    * ```
    */
  get cart(): Prisma.cartDelegate<GlobalReject>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.paymentDelegate<GlobalReject>;

  /**
   * `prisma.subCatagory`: Exposes CRUD operations for the **subCatagory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubCatagories
    * const subCatagories = await prisma.subCatagory.findMany()
    * ```
    */
  get subCatagory(): Prisma.subCatagoryDelegate<GlobalReject>;

  /**
   * `prisma.catagory`: Exposes CRUD operations for the **catagory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Catagories
    * const catagories = await prisma.catagory.findMany()
    * ```
    */
  get catagory(): Prisma.catagoryDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    users: 'users',
    product: 'product',
    cart: 'cart',
    payment: 'payment',
    subCatagory: 'subCatagory',
    catagory: 'catagory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    product: number
    cart: number
    payment: number
    catagory: number
    subCatagory: number
  }

  export type UsersCountOutputTypeSelect = {
    product?: boolean
    cart?: boolean
    payment?: boolean
    catagory?: boolean
    subCatagory?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    cart: number
    payment: number
  }

  export type ProductCountOutputTypeSelect = {
    cart?: boolean
    payment?: boolean
  }

  export type ProductCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductCountOutputTypeArgs)
    ? ProductCountOutputType 
    : S extends { select: any } & (ProductCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductCountOutputType ? ProductCountOutputType[P] : never
  } 
      : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     * 
    **/
    select?: ProductCountOutputTypeSelect | null
  }



  /**
   * Count Type CartCountOutputType
   */


  export type CartCountOutputType = {
    payment: number
  }

  export type CartCountOutputTypeSelect = {
    payment?: boolean
  }

  export type CartCountOutputTypeGetPayload<S extends boolean | null | undefined | CartCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CartCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CartCountOutputTypeArgs)
    ? CartCountOutputType 
    : S extends { select: any } & (CartCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CartCountOutputType ? CartCountOutputType[P] : never
  } 
      : CartCountOutputType




  // Custom InputTypes

  /**
   * CartCountOutputType without action
   */
  export type CartCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CartCountOutputType
     * 
    **/
    select?: CartCountOutputTypeSelect | null
  }



  /**
   * Count Type SubCatagoryCountOutputType
   */


  export type SubCatagoryCountOutputType = {
    Product: number
  }

  export type SubCatagoryCountOutputTypeSelect = {
    Product?: boolean
  }

  export type SubCatagoryCountOutputTypeGetPayload<S extends boolean | null | undefined | SubCatagoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SubCatagoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SubCatagoryCountOutputTypeArgs)
    ? SubCatagoryCountOutputType 
    : S extends { select: any } & (SubCatagoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SubCatagoryCountOutputType ? SubCatagoryCountOutputType[P] : never
  } 
      : SubCatagoryCountOutputType




  // Custom InputTypes

  /**
   * SubCatagoryCountOutputType without action
   */
  export type SubCatagoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SubCatagoryCountOutputType
     * 
    **/
    select?: SubCatagoryCountOutputTypeSelect | null
  }



  /**
   * Count Type CatagoryCountOutputType
   */


  export type CatagoryCountOutputType = {
    subCategorie: number
  }

  export type CatagoryCountOutputTypeSelect = {
    subCategorie?: boolean
  }

  export type CatagoryCountOutputTypeGetPayload<S extends boolean | null | undefined | CatagoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CatagoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CatagoryCountOutputTypeArgs)
    ? CatagoryCountOutputType 
    : S extends { select: any } & (CatagoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CatagoryCountOutputType ? CatagoryCountOutputType[P] : never
  } 
      : CatagoryCountOutputType




  // Custom InputTypes

  /**
   * CatagoryCountOutputType without action
   */
  export type CatagoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CatagoryCountOutputType
     * 
    **/
    select?: CatagoryCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    userId: number | null
  }

  export type UsersSumAggregateOutputType = {
    userId: number | null
  }

  export type UsersMinAggregateOutputType = {
    userId: number | null
    FirstName: string | null
    LastName: string | null
    Address: string | null
    Email: string | null
    Password: string | null
    Role: Roles | null
  }

  export type UsersMaxAggregateOutputType = {
    userId: number | null
    FirstName: string | null
    LastName: string | null
    Address: string | null
    Email: string | null
    Password: string | null
    Role: Roles | null
  }

  export type UsersCountAggregateOutputType = {
    userId: number
    FirstName: number
    LastName: number
    Address: number
    Email: number
    Password: number
    Role: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    userId?: true
  }

  export type UsersSumAggregateInputType = {
    userId?: true
  }

  export type UsersMinAggregateInputType = {
    userId?: true
    FirstName?: true
    LastName?: true
    Address?: true
    Email?: true
    Password?: true
    Role?: true
  }

  export type UsersMaxAggregateInputType = {
    userId?: true
    FirstName?: true
    LastName?: true
    Address?: true
    Email?: true
    Password?: true
    Role?: true
  }

  export type UsersCountAggregateInputType = {
    userId?: true
    FirstName?: true
    LastName?: true
    Address?: true
    Email?: true
    Password?: true
    Role?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    userId: number
    FirstName: string
    LastName: string
    Address: string | null
    Email: string
    Password: string
    Role: Roles
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    userId?: boolean
    FirstName?: boolean
    LastName?: boolean
    Address?: boolean
    Email?: boolean
    Password?: boolean
    Role?: boolean
    product?: boolean | usersProductArgs
    cart?: boolean | usersCartArgs
    payment?: boolean | usersPaymentArgs
    catagory?: boolean | usersCatagoryArgs
    subCatagory?: boolean | usersSubCatagoryArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type usersInclude = {
    product?: boolean | usersProductArgs
    cart?: boolean | usersCartArgs
    payment?: boolean | usersPaymentArgs
    catagory?: boolean | usersCatagoryArgs
    subCatagory?: boolean | usersSubCatagoryArgs
    _count?: boolean | UsersCountOutputTypeArgs
  } 

  export type usersGetPayload<S extends boolean | null | undefined | usersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? users :
    S extends undefined ? never :
    S extends { include: any } & (usersArgs | usersFindManyArgs)
    ? users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'product' ? Array < productGetPayload<S['include'][P]>>  :
        P extends 'cart' ? Array < cartGetPayload<S['include'][P]>>  :
        P extends 'payment' ? Array < paymentGetPayload<S['include'][P]>>  :
        P extends 'catagory' ? Array < catagoryGetPayload<S['include'][P]>>  :
        P extends 'subCatagory' ? Array < subCatagoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (usersArgs | usersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'product' ? Array < productGetPayload<S['select'][P]>>  :
        P extends 'cart' ? Array < cartGetPayload<S['select'][P]>>  :
        P extends 'payment' ? Array < paymentGetPayload<S['select'][P]>>  :
        P extends 'catagory' ? Array < catagoryGetPayload<S['select'][P]>>  :
        P extends 'subCatagory' ? Array < subCatagoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
      : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const usersWithUserIdOnly = await prisma.users.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): PrismaPromise<Array<usersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends usersProductArgs= {}>(args?: Subset<T, usersProductArgs>): PrismaPromise<Array<productGetPayload<T>>| Null>;

    cart<T extends usersCartArgs= {}>(args?: Subset<T, usersCartArgs>): PrismaPromise<Array<cartGetPayload<T>>| Null>;

    payment<T extends usersPaymentArgs= {}>(args?: Subset<T, usersPaymentArgs>): PrismaPromise<Array<paymentGetPayload<T>>| Null>;

    catagory<T extends usersCatagoryArgs= {}>(args?: Subset<T, usersCatagoryArgs>): PrismaPromise<Array<catagoryGetPayload<T>>| Null>;

    subCatagory<T extends usersSubCatagoryArgs= {}>(args?: Subset<T, usersSubCatagoryArgs>): PrismaPromise<Array<subCatagoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }

  /**
   * users findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users.product
   */
  export type usersProductArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithRelationInput>
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * users.cart
   */
  export type usersCartArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    where?: cartWhereInput
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    cursor?: cartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * users.payment
   */
  export type usersPaymentArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    where?: paymentWhereInput
    orderBy?: Enumerable<paymentOrderByWithRelationInput>
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * users.catagory
   */
  export type usersCatagoryArgs = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    where?: catagoryWhereInput
    orderBy?: Enumerable<catagoryOrderByWithRelationInput>
    cursor?: catagoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CatagoryScalarFieldEnum>
  }


  /**
   * users.subCatagory
   */
  export type usersSubCatagoryArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    where?: subCatagoryWhereInput
    orderBy?: Enumerable<subCatagoryOrderByWithRelationInput>
    cursor?: subCatagoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SubCatagoryScalarFieldEnum>
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    ProductId: number | null
    userId: number | null
    subatCagoryId: number | null
  }

  export type ProductSumAggregateOutputType = {
    ProductId: number | null
    userId: number | null
    subatCagoryId: number | null
  }

  export type ProductMinAggregateOutputType = {
    ProductId: number | null
    title: string | null
    Description: string | null
    Price: string | null
    img: string | null
    Store: string | null
    userId: number | null
    subatCagoryId: number | null
  }

  export type ProductMaxAggregateOutputType = {
    ProductId: number | null
    title: string | null
    Description: string | null
    Price: string | null
    img: string | null
    Store: string | null
    userId: number | null
    subatCagoryId: number | null
  }

  export type ProductCountAggregateOutputType = {
    ProductId: number
    title: number
    Description: number
    Price: number
    img: number
    Store: number
    userId: number
    subatCagoryId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    ProductId?: true
    userId?: true
    subatCagoryId?: true
  }

  export type ProductSumAggregateInputType = {
    ProductId?: true
    userId?: true
    subatCagoryId?: true
  }

  export type ProductMinAggregateInputType = {
    ProductId?: true
    title?: true
    Description?: true
    Price?: true
    img?: true
    Store?: true
    userId?: true
    subatCagoryId?: true
  }

  export type ProductMaxAggregateInputType = {
    ProductId?: true
    title?: true
    Description?: true
    Price?: true
    img?: true
    Store?: true
    userId?: true
    subatCagoryId?: true
  }

  export type ProductCountAggregateInputType = {
    ProductId?: true
    title?: true
    Description?: true
    Price?: true
    img?: true
    Store?: true
    userId?: true
    subatCagoryId?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which product to aggregate.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithAggregationInput>
    by: Array<ProductScalarFieldEnum>
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    ProductId: number
    title: string
    Description: string | null
    Price: string
    img: string
    Store: string
    userId: number
    subatCagoryId: number
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect = {
    ProductId?: boolean
    title?: boolean
    Description?: boolean
    Price?: boolean
    img?: boolean
    Store?: boolean
    userId?: boolean
    subatCagoryId?: boolean
    users?: boolean | usersArgs
    subCatagory?: boolean | subCatagoryArgs
    cart?: boolean | productCartArgs
    payment?: boolean | productPaymentArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }


  export type productInclude = {
    users?: boolean | usersArgs
    subCatagory?: boolean | subCatagoryArgs
    cart?: boolean | productCartArgs
    payment?: boolean | productPaymentArgs
    _count?: boolean | ProductCountOutputTypeArgs
  } 

  export type productGetPayload<S extends boolean | null | undefined | productArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? product :
    S extends undefined ? never :
    S extends { include: any } & (productArgs | productFindManyArgs)
    ? product  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<S['include'][P]> :
        P extends 'subCatagory' ? subCatagoryGetPayload<S['include'][P]> :
        P extends 'cart' ? Array < cartGetPayload<S['include'][P]>>  :
        P extends 'payment' ? Array < paymentGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (productArgs | productFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<S['select'][P]> :
        P extends 'subCatagory' ? subCatagoryGetPayload<S['select'][P]> :
        P extends 'cart' ? Array < cartGetPayload<S['select'][P]>>  :
        P extends 'payment' ? Array < paymentGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof product ? product[P] : never
  } 
      : product


  type productCountArgs = Merge<
    Omit<productFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface productDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product'> extends True ? Prisma__productClient<productGetPayload<T>> : Prisma__productClient<productGetPayload<T> | null, null>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, productFindUniqueOrThrowArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product'> extends True ? Prisma__productClient<productGetPayload<T>> : Prisma__productClient<productGetPayload<T> | null, null>

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productFindFirstOrThrowArgs>(
      args?: SelectSubset<T, productFindFirstOrThrowArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `ProductId`
     * const productWithProductIdOnly = await prisma.product.findMany({ select: { ProductId: true } })
     * 
    **/
    findMany<T extends productFindManyArgs>(
      args?: SelectSubset<T, productFindManyArgs>
    ): PrismaPromise<Array<productGetPayload<T>>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends productCreateArgs>(
      args: SelectSubset<T, productCreateArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Create many Products.
     *     @param {productCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productCreateManyArgs>(
      args?: SelectSubset<T, productCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends productDeleteArgs>(
      args: SelectSubset<T, productDeleteArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productUpdateArgs>(
      args: SelectSubset<T, productUpdateArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productDeleteManyArgs>(
      args?: SelectSubset<T, productDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productUpdateManyArgs>(
      args: SelectSubset<T, productUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends productUpsertArgs>(
      args: SelectSubset<T, productUpsertArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    subCatagory<T extends subCatagoryArgs= {}>(args?: Subset<T, subCatagoryArgs>): Prisma__subCatagoryClient<subCatagoryGetPayload<T> | Null>;

    cart<T extends productCartArgs= {}>(args?: Subset<T, productCartArgs>): PrismaPromise<Array<cartGetPayload<T>>| Null>;

    payment<T extends productPaymentArgs= {}>(args?: Subset<T, productPaymentArgs>): PrismaPromise<Array<paymentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * product base type for findUnique actions
   */
  export type productFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     * 
    **/
    where: productWhereUniqueInput
  }

  /**
   * product findUnique
   */
  export interface productFindUniqueArgs extends productFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     * 
    **/
    where: productWhereUniqueInput
  }


  /**
   * product base type for findFirst actions
   */
  export type productFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }

  /**
   * product findFirst
   */
  export interface productFindFirstArgs extends productFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product findMany
   */
  export type productFindManyArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter, which products to fetch.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product create
   */
  export type productCreateArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * The data needed to create a product.
     * 
    **/
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }


  /**
   * product createMany
   */
  export type productCreateManyArgs = {
    /**
     * The data used to create many products.
     * 
    **/
    data: Enumerable<productCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product update
   */
  export type productUpdateArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * The data needed to update a product.
     * 
    **/
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     * 
    **/
    where: productWhereUniqueInput
  }


  /**
   * product updateMany
   */
  export type productUpdateManyArgs = {
    /**
     * The data used to update products.
     * 
    **/
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     * 
    **/
    where?: productWhereInput
  }


  /**
   * product upsert
   */
  export type productUpsertArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * The filter to search for the product to update in case it exists.
     * 
    **/
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     * 
    **/
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }


  /**
   * product delete
   */
  export type productDeleteArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter which product to delete.
     * 
    **/
    where: productWhereUniqueInput
  }


  /**
   * product deleteMany
   */
  export type productDeleteManyArgs = {
    /**
     * Filter which products to delete
     * 
    **/
    where?: productWhereInput
  }


  /**
   * product.cart
   */
  export type productCartArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    where?: cartWhereInput
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    cursor?: cartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * product.payment
   */
  export type productPaymentArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    where?: paymentWhereInput
    orderBy?: Enumerable<paymentOrderByWithRelationInput>
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * product without action
   */
  export type productArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
  }



  /**
   * Model cart
   */


  export type AggregateCart = {
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  export type CartAvgAggregateOutputType = {
    cartId: number | null
    qty: number | null
    userId: number | null
    ProductId: number | null
  }

  export type CartSumAggregateOutputType = {
    cartId: number | null
    qty: number | null
    userId: number | null
    ProductId: number | null
  }

  export type CartMinAggregateOutputType = {
    cartId: number | null
    qty: number | null
    userId: number | null
    ProductId: number | null
  }

  export type CartMaxAggregateOutputType = {
    cartId: number | null
    qty: number | null
    userId: number | null
    ProductId: number | null
  }

  export type CartCountAggregateOutputType = {
    cartId: number
    qty: number
    userId: number
    ProductId: number
    _all: number
  }


  export type CartAvgAggregateInputType = {
    cartId?: true
    qty?: true
    userId?: true
    ProductId?: true
  }

  export type CartSumAggregateInputType = {
    cartId?: true
    qty?: true
    userId?: true
    ProductId?: true
  }

  export type CartMinAggregateInputType = {
    cartId?: true
    qty?: true
    userId?: true
    ProductId?: true
  }

  export type CartMaxAggregateInputType = {
    cartId?: true
    qty?: true
    userId?: true
    ProductId?: true
  }

  export type CartCountAggregateInputType = {
    cartId?: true
    qty?: true
    userId?: true
    ProductId?: true
    _all?: true
  }

  export type CartAggregateArgs = {
    /**
     * Filter which cart to aggregate.
     * 
    **/
    where?: cartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carts to fetch.
     * 
    **/
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: cartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned carts
    **/
    _count?: true | CartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartMaxAggregateInputType
  }

  export type GetCartAggregateType<T extends CartAggregateArgs> = {
        [P in keyof T & keyof AggregateCart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart[P]>
      : GetScalarType<T[P], AggregateCart[P]>
  }




  export type CartGroupByArgs = {
    where?: cartWhereInput
    orderBy?: Enumerable<cartOrderByWithAggregationInput>
    by: Array<CartScalarFieldEnum>
    having?: cartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartCountAggregateInputType | true
    _avg?: CartAvgAggregateInputType
    _sum?: CartSumAggregateInputType
    _min?: CartMinAggregateInputType
    _max?: CartMaxAggregateInputType
  }


  export type CartGroupByOutputType = {
    cartId: number
    qty: number
    userId: number
    ProductId: number
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  type GetCartGroupByPayload<T extends CartGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartGroupByOutputType[P]>
            : GetScalarType<T[P], CartGroupByOutputType[P]>
        }
      >
    >


  export type cartSelect = {
    cartId?: boolean
    qty?: boolean
    userId?: boolean
    ProductId?: boolean
    users?: boolean | usersArgs
    product?: boolean | productArgs
    payment?: boolean | cartPaymentArgs
    _count?: boolean | CartCountOutputTypeArgs
  }


  export type cartInclude = {
    users?: boolean | usersArgs
    product?: boolean | productArgs
    payment?: boolean | cartPaymentArgs
    _count?: boolean | CartCountOutputTypeArgs
  } 

  export type cartGetPayload<S extends boolean | null | undefined | cartArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? cart :
    S extends undefined ? never :
    S extends { include: any } & (cartArgs | cartFindManyArgs)
    ? cart  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<S['include'][P]> :
        P extends 'product' ? productGetPayload<S['include'][P]> :
        P extends 'payment' ? Array < paymentGetPayload<S['include'][P]>>  :
        P extends '_count' ? CartCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (cartArgs | cartFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<S['select'][P]> :
        P extends 'product' ? productGetPayload<S['select'][P]> :
        P extends 'payment' ? Array < paymentGetPayload<S['select'][P]>>  :
        P extends '_count' ? CartCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof cart ? cart[P] : never
  } 
      : cart


  type cartCountArgs = Merge<
    Omit<cartFindManyArgs, 'select' | 'include'> & {
      select?: CartCountAggregateInputType | true
    }
  >

  export interface cartDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Cart that matches the filter.
     * @param {cartFindUniqueArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cartFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, cartFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'cart'> extends True ? Prisma__cartClient<cartGetPayload<T>> : Prisma__cartClient<cartGetPayload<T> | null, null>

    /**
     * Find one Cart that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cartFindUniqueOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cartFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, cartFindUniqueOrThrowArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Find the first Cart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartFindFirstArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cartFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, cartFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'cart'> extends True ? Prisma__cartClient<cartGetPayload<T>> : Prisma__cartClient<cartGetPayload<T> | null, null>

    /**
     * Find the first Cart that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartFindFirstOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cartFindFirstOrThrowArgs>(
      args?: SelectSubset<T, cartFindFirstOrThrowArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Find zero or more Carts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carts
     * const carts = await prisma.cart.findMany()
     * 
     * // Get first 10 Carts
     * const carts = await prisma.cart.findMany({ take: 10 })
     * 
     * // Only select the `cartId`
     * const cartWithCartIdOnly = await prisma.cart.findMany({ select: { cartId: true } })
     * 
    **/
    findMany<T extends cartFindManyArgs>(
      args?: SelectSubset<T, cartFindManyArgs>
    ): PrismaPromise<Array<cartGetPayload<T>>>

    /**
     * Create a Cart.
     * @param {cartCreateArgs} args - Arguments to create a Cart.
     * @example
     * // Create one Cart
     * const Cart = await prisma.cart.create({
     *   data: {
     *     // ... data to create a Cart
     *   }
     * })
     * 
    **/
    create<T extends cartCreateArgs>(
      args: SelectSubset<T, cartCreateArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Create many Carts.
     *     @param {cartCreateManyArgs} args - Arguments to create many Carts.
     *     @example
     *     // Create many Carts
     *     const cart = await prisma.cart.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cartCreateManyArgs>(
      args?: SelectSubset<T, cartCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cart.
     * @param {cartDeleteArgs} args - Arguments to delete one Cart.
     * @example
     * // Delete one Cart
     * const Cart = await prisma.cart.delete({
     *   where: {
     *     // ... filter to delete one Cart
     *   }
     * })
     * 
    **/
    delete<T extends cartDeleteArgs>(
      args: SelectSubset<T, cartDeleteArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Update one Cart.
     * @param {cartUpdateArgs} args - Arguments to update one Cart.
     * @example
     * // Update one Cart
     * const cart = await prisma.cart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cartUpdateArgs>(
      args: SelectSubset<T, cartUpdateArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Delete zero or more Carts.
     * @param {cartDeleteManyArgs} args - Arguments to filter Carts to delete.
     * @example
     * // Delete a few Carts
     * const { count } = await prisma.cart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cartDeleteManyArgs>(
      args?: SelectSubset<T, cartDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cartUpdateManyArgs>(
      args: SelectSubset<T, cartUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cart.
     * @param {cartUpsertArgs} args - Arguments to update or create a Cart.
     * @example
     * // Update or create a Cart
     * const cart = await prisma.cart.upsert({
     *   create: {
     *     // ... data to create a Cart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart we want to update
     *   }
     * })
    **/
    upsert<T extends cartUpsertArgs>(
      args: SelectSubset<T, cartUpsertArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Count the number of Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartCountArgs} args - Arguments to filter Carts to count.
     * @example
     * // Count the number of Carts
     * const count = await prisma.cart.count({
     *   where: {
     *     // ... the filter for the Carts we want to count
     *   }
     * })
    **/
    count<T extends cartCountArgs>(
      args?: Subset<T, cartCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartAggregateArgs>(args: Subset<T, CartAggregateArgs>): PrismaPromise<GetCartAggregateType<T>>

    /**
     * Group by Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartGroupByArgs['orderBy'] }
        : { orderBy?: CartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for cart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__cartClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    product<T extends productArgs= {}>(args?: Subset<T, productArgs>): Prisma__productClient<productGetPayload<T> | Null>;

    payment<T extends cartPaymentArgs= {}>(args?: Subset<T, cartPaymentArgs>): PrismaPromise<Array<paymentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * cart base type for findUnique actions
   */
  export type cartFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    /**
     * Filter, which cart to fetch.
     * 
    **/
    where: cartWhereUniqueInput
  }

  /**
   * cart findUnique
   */
  export interface cartFindUniqueArgs extends cartFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cart findUniqueOrThrow
   */
  export type cartFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    /**
     * Filter, which cart to fetch.
     * 
    **/
    where: cartWhereUniqueInput
  }


  /**
   * cart base type for findFirst actions
   */
  export type cartFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    /**
     * Filter, which cart to fetch.
     * 
    **/
    where?: cartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carts to fetch.
     * 
    **/
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carts.
     * 
    **/
    cursor?: cartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carts.
     * 
    **/
    distinct?: Enumerable<CartScalarFieldEnum>
  }

  /**
   * cart findFirst
   */
  export interface cartFindFirstArgs extends cartFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cart findFirstOrThrow
   */
  export type cartFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    /**
     * Filter, which cart to fetch.
     * 
    **/
    where?: cartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carts to fetch.
     * 
    **/
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carts.
     * 
    **/
    cursor?: cartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carts.
     * 
    **/
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * cart findMany
   */
  export type cartFindManyArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    /**
     * Filter, which carts to fetch.
     * 
    **/
    where?: cartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carts to fetch.
     * 
    **/
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing carts.
     * 
    **/
    cursor?: cartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * cart create
   */
  export type cartCreateArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    /**
     * The data needed to create a cart.
     * 
    **/
    data: XOR<cartCreateInput, cartUncheckedCreateInput>
  }


  /**
   * cart createMany
   */
  export type cartCreateManyArgs = {
    /**
     * The data used to create many carts.
     * 
    **/
    data: Enumerable<cartCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * cart update
   */
  export type cartUpdateArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    /**
     * The data needed to update a cart.
     * 
    **/
    data: XOR<cartUpdateInput, cartUncheckedUpdateInput>
    /**
     * Choose, which cart to update.
     * 
    **/
    where: cartWhereUniqueInput
  }


  /**
   * cart updateMany
   */
  export type cartUpdateManyArgs = {
    /**
     * The data used to update carts.
     * 
    **/
    data: XOR<cartUpdateManyMutationInput, cartUncheckedUpdateManyInput>
    /**
     * Filter which carts to update
     * 
    **/
    where?: cartWhereInput
  }


  /**
   * cart upsert
   */
  export type cartUpsertArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    /**
     * The filter to search for the cart to update in case it exists.
     * 
    **/
    where: cartWhereUniqueInput
    /**
     * In case the cart found by the `where` argument doesn't exist, create a new cart with this data.
     * 
    **/
    create: XOR<cartCreateInput, cartUncheckedCreateInput>
    /**
     * In case the cart was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<cartUpdateInput, cartUncheckedUpdateInput>
  }


  /**
   * cart delete
   */
  export type cartDeleteArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
    /**
     * Filter which cart to delete.
     * 
    **/
    where: cartWhereUniqueInput
  }


  /**
   * cart deleteMany
   */
  export type cartDeleteManyArgs = {
    /**
     * Filter which carts to delete
     * 
    **/
    where?: cartWhereInput
  }


  /**
   * cart.payment
   */
  export type cartPaymentArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    where?: paymentWhereInput
    orderBy?: Enumerable<paymentOrderByWithRelationInput>
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * cart without action
   */
  export type cartArgs = {
    /**
     * Select specific fields to fetch from the cart
     * 
    **/
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cartInclude | null
  }



  /**
   * Model payment
   */


  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    createAt: number | null
    ProductId: number | null
    cartId: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    createAt: number | null
    ProductId: number | null
    cartId: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    createAt: number | null
    is_paid: boolean | null
    is_deliveredn: boolean | null
    ProductId: number | null
    cartId: number | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    createAt: number | null
    is_paid: boolean | null
    is_deliveredn: boolean | null
    ProductId: number | null
    cartId: number | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    userId: number
    createAt: number
    is_paid: number
    is_deliveredn: number
    ProductId: number
    cartId: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    userId?: true
    createAt?: true
    ProductId?: true
    cartId?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    userId?: true
    createAt?: true
    ProductId?: true
    cartId?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    userId?: true
    createAt?: true
    is_paid?: true
    is_deliveredn?: true
    ProductId?: true
    cartId?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    userId?: true
    createAt?: true
    is_paid?: true
    is_deliveredn?: true
    ProductId?: true
    cartId?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    userId?: true
    createAt?: true
    is_paid?: true
    is_deliveredn?: true
    ProductId?: true
    cartId?: true
    _all?: true
  }

  export type PaymentAggregateArgs = {
    /**
     * Filter which payment to aggregate.
     * 
    **/
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     * 
    **/
    orderBy?: Enumerable<paymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs = {
    where?: paymentWhereInput
    orderBy?: Enumerable<paymentOrderByWithAggregationInput>
    by: Array<PaymentScalarFieldEnum>
    having?: paymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }


  export type PaymentGroupByOutputType = {
    id: number
    userId: number
    createAt: number | null
    is_paid: boolean
    is_deliveredn: boolean
    ProductId: number
    cartId: number
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type paymentSelect = {
    id?: boolean
    userId?: boolean
    createAt?: boolean
    is_paid?: boolean
    is_deliveredn?: boolean
    ProductId?: boolean
    cartId?: boolean
    product?: boolean | productArgs
    users?: boolean | usersArgs
    cart?: boolean | cartArgs
  }


  export type paymentInclude = {
    product?: boolean | productArgs
    users?: boolean | usersArgs
    cart?: boolean | cartArgs
  } 

  export type paymentGetPayload<S extends boolean | null | undefined | paymentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? payment :
    S extends undefined ? never :
    S extends { include: any } & (paymentArgs | paymentFindManyArgs)
    ? payment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'product' ? productGetPayload<S['include'][P]> :
        P extends 'users' ? usersGetPayload<S['include'][P]> :
        P extends 'cart' ? cartGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (paymentArgs | paymentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'product' ? productGetPayload<S['select'][P]> :
        P extends 'users' ? usersGetPayload<S['select'][P]> :
        P extends 'cart' ? cartGetPayload<S['select'][P]> :  P extends keyof payment ? payment[P] : never
  } 
      : payment


  type paymentCountArgs = Merge<
    Omit<paymentFindManyArgs, 'select' | 'include'> & {
      select?: PaymentCountAggregateInputType | true
    }
  >

  export interface paymentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Payment that matches the filter.
     * @param {paymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends paymentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, paymentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'payment'> extends True ? Prisma__paymentClient<paymentGetPayload<T>> : Prisma__paymentClient<paymentGetPayload<T> | null, null>

    /**
     * Find one Payment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {paymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends paymentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, paymentFindUniqueOrThrowArgs>
    ): Prisma__paymentClient<paymentGetPayload<T>>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends paymentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, paymentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'payment'> extends True ? Prisma__paymentClient<paymentGetPayload<T>> : Prisma__paymentClient<paymentGetPayload<T> | null, null>

    /**
     * Find the first Payment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends paymentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, paymentFindFirstOrThrowArgs>
    ): Prisma__paymentClient<paymentGetPayload<T>>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends paymentFindManyArgs>(
      args?: SelectSubset<T, paymentFindManyArgs>
    ): PrismaPromise<Array<paymentGetPayload<T>>>

    /**
     * Create a Payment.
     * @param {paymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
    **/
    create<T extends paymentCreateArgs>(
      args: SelectSubset<T, paymentCreateArgs>
    ): Prisma__paymentClient<paymentGetPayload<T>>

    /**
     * Create many Payments.
     *     @param {paymentCreateManyArgs} args - Arguments to create many Payments.
     *     @example
     *     // Create many Payments
     *     const payment = await prisma.payment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends paymentCreateManyArgs>(
      args?: SelectSubset<T, paymentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {paymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
    **/
    delete<T extends paymentDeleteArgs>(
      args: SelectSubset<T, paymentDeleteArgs>
    ): Prisma__paymentClient<paymentGetPayload<T>>

    /**
     * Update one Payment.
     * @param {paymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends paymentUpdateArgs>(
      args: SelectSubset<T, paymentUpdateArgs>
    ): Prisma__paymentClient<paymentGetPayload<T>>

    /**
     * Delete zero or more Payments.
     * @param {paymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends paymentDeleteManyArgs>(
      args?: SelectSubset<T, paymentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends paymentUpdateManyArgs>(
      args: SelectSubset<T, paymentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {paymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
    **/
    upsert<T extends paymentUpsertArgs>(
      args: SelectSubset<T, paymentUpsertArgs>
    ): Prisma__paymentClient<paymentGetPayload<T>>

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends paymentCountArgs>(
      args?: Subset<T, paymentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__paymentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends productArgs= {}>(args?: Subset<T, productArgs>): Prisma__productClient<productGetPayload<T> | Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    cart<T extends cartArgs= {}>(args?: Subset<T, cartArgs>): Prisma__cartClient<cartGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * payment base type for findUnique actions
   */
  export type paymentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    /**
     * Filter, which payment to fetch.
     * 
    **/
    where: paymentWhereUniqueInput
  }

  /**
   * payment findUnique
   */
  export interface paymentFindUniqueArgs extends paymentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * payment findUniqueOrThrow
   */
  export type paymentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    /**
     * Filter, which payment to fetch.
     * 
    **/
    where: paymentWhereUniqueInput
  }


  /**
   * payment base type for findFirst actions
   */
  export type paymentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    /**
     * Filter, which payment to fetch.
     * 
    **/
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     * 
    **/
    orderBy?: Enumerable<paymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     * 
    **/
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     * 
    **/
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }

  /**
   * payment findFirst
   */
  export interface paymentFindFirstArgs extends paymentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * payment findFirstOrThrow
   */
  export type paymentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    /**
     * Filter, which payment to fetch.
     * 
    **/
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     * 
    **/
    orderBy?: Enumerable<paymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     * 
    **/
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     * 
    **/
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * payment findMany
   */
  export type paymentFindManyArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    /**
     * Filter, which payments to fetch.
     * 
    **/
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     * 
    **/
    orderBy?: Enumerable<paymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payments.
     * 
    **/
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * payment create
   */
  export type paymentCreateArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    /**
     * The data needed to create a payment.
     * 
    **/
    data: XOR<paymentCreateInput, paymentUncheckedCreateInput>
  }


  /**
   * payment createMany
   */
  export type paymentCreateManyArgs = {
    /**
     * The data used to create many payments.
     * 
    **/
    data: Enumerable<paymentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * payment update
   */
  export type paymentUpdateArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    /**
     * The data needed to update a payment.
     * 
    **/
    data: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
    /**
     * Choose, which payment to update.
     * 
    **/
    where: paymentWhereUniqueInput
  }


  /**
   * payment updateMany
   */
  export type paymentUpdateManyArgs = {
    /**
     * The data used to update payments.
     * 
    **/
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     * 
    **/
    where?: paymentWhereInput
  }


  /**
   * payment upsert
   */
  export type paymentUpsertArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    /**
     * The filter to search for the payment to update in case it exists.
     * 
    **/
    where: paymentWhereUniqueInput
    /**
     * In case the payment found by the `where` argument doesn't exist, create a new payment with this data.
     * 
    **/
    create: XOR<paymentCreateInput, paymentUncheckedCreateInput>
    /**
     * In case the payment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
  }


  /**
   * payment delete
   */
  export type paymentDeleteArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
    /**
     * Filter which payment to delete.
     * 
    **/
    where: paymentWhereUniqueInput
  }


  /**
   * payment deleteMany
   */
  export type paymentDeleteManyArgs = {
    /**
     * Filter which payments to delete
     * 
    **/
    where?: paymentWhereInput
  }


  /**
   * payment without action
   */
  export type paymentArgs = {
    /**
     * Select specific fields to fetch from the payment
     * 
    **/
    select?: paymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: paymentInclude | null
  }



  /**
   * Model subCatagory
   */


  export type AggregateSubCatagory = {
    _count: SubCatagoryCountAggregateOutputType | null
    _avg: SubCatagoryAvgAggregateOutputType | null
    _sum: SubCatagorySumAggregateOutputType | null
    _min: SubCatagoryMinAggregateOutputType | null
    _max: SubCatagoryMaxAggregateOutputType | null
  }

  export type SubCatagoryAvgAggregateOutputType = {
    subatCagoryId: number | null
    CagoryId: number | null
    userId: number | null
  }

  export type SubCatagorySumAggregateOutputType = {
    subatCagoryId: number | null
    CagoryId: number | null
    userId: number | null
  }

  export type SubCatagoryMinAggregateOutputType = {
    subatCagoryId: number | null
    type: string | null
    img: string | null
    CagoryId: number | null
    userId: number | null
  }

  export type SubCatagoryMaxAggregateOutputType = {
    subatCagoryId: number | null
    type: string | null
    img: string | null
    CagoryId: number | null
    userId: number | null
  }

  export type SubCatagoryCountAggregateOutputType = {
    subatCagoryId: number
    type: number
    img: number
    CagoryId: number
    userId: number
    _all: number
  }


  export type SubCatagoryAvgAggregateInputType = {
    subatCagoryId?: true
    CagoryId?: true
    userId?: true
  }

  export type SubCatagorySumAggregateInputType = {
    subatCagoryId?: true
    CagoryId?: true
    userId?: true
  }

  export type SubCatagoryMinAggregateInputType = {
    subatCagoryId?: true
    type?: true
    img?: true
    CagoryId?: true
    userId?: true
  }

  export type SubCatagoryMaxAggregateInputType = {
    subatCagoryId?: true
    type?: true
    img?: true
    CagoryId?: true
    userId?: true
  }

  export type SubCatagoryCountAggregateInputType = {
    subatCagoryId?: true
    type?: true
    img?: true
    CagoryId?: true
    userId?: true
    _all?: true
  }

  export type SubCatagoryAggregateArgs = {
    /**
     * Filter which subCatagory to aggregate.
     * 
    **/
    where?: subCatagoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCatagories to fetch.
     * 
    **/
    orderBy?: Enumerable<subCatagoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: subCatagoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCatagories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCatagories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subCatagories
    **/
    _count?: true | SubCatagoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubCatagoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubCatagorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubCatagoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubCatagoryMaxAggregateInputType
  }

  export type GetSubCatagoryAggregateType<T extends SubCatagoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSubCatagory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubCatagory[P]>
      : GetScalarType<T[P], AggregateSubCatagory[P]>
  }




  export type SubCatagoryGroupByArgs = {
    where?: subCatagoryWhereInput
    orderBy?: Enumerable<subCatagoryOrderByWithAggregationInput>
    by: Array<SubCatagoryScalarFieldEnum>
    having?: subCatagoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubCatagoryCountAggregateInputType | true
    _avg?: SubCatagoryAvgAggregateInputType
    _sum?: SubCatagorySumAggregateInputType
    _min?: SubCatagoryMinAggregateInputType
    _max?: SubCatagoryMaxAggregateInputType
  }


  export type SubCatagoryGroupByOutputType = {
    subatCagoryId: number
    type: string
    img: string
    CagoryId: number
    userId: number
    _count: SubCatagoryCountAggregateOutputType | null
    _avg: SubCatagoryAvgAggregateOutputType | null
    _sum: SubCatagorySumAggregateOutputType | null
    _min: SubCatagoryMinAggregateOutputType | null
    _max: SubCatagoryMaxAggregateOutputType | null
  }

  type GetSubCatagoryGroupByPayload<T extends SubCatagoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SubCatagoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubCatagoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubCatagoryGroupByOutputType[P]>
            : GetScalarType<T[P], SubCatagoryGroupByOutputType[P]>
        }
      >
    >


  export type subCatagorySelect = {
    subatCagoryId?: boolean
    type?: boolean
    img?: boolean
    CagoryId?: boolean
    Product?: boolean | subCatagoryProductArgs
    catogory?: boolean | catagoryArgs
    userId?: boolean
    user?: boolean | usersArgs
    _count?: boolean | SubCatagoryCountOutputTypeArgs
  }


  export type subCatagoryInclude = {
    Product?: boolean | subCatagoryProductArgs
    catogory?: boolean | catagoryArgs
    user?: boolean | usersArgs
    _count?: boolean | SubCatagoryCountOutputTypeArgs
  } 

  export type subCatagoryGetPayload<S extends boolean | null | undefined | subCatagoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? subCatagory :
    S extends undefined ? never :
    S extends { include: any } & (subCatagoryArgs | subCatagoryFindManyArgs)
    ? subCatagory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Product' ? Array < productGetPayload<S['include'][P]>>  :
        P extends 'catogory' ? catagoryGetPayload<S['include'][P]> :
        P extends 'user' ? usersGetPayload<S['include'][P]> :
        P extends '_count' ? SubCatagoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (subCatagoryArgs | subCatagoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Product' ? Array < productGetPayload<S['select'][P]>>  :
        P extends 'catogory' ? catagoryGetPayload<S['select'][P]> :
        P extends 'user' ? usersGetPayload<S['select'][P]> :
        P extends '_count' ? SubCatagoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof subCatagory ? subCatagory[P] : never
  } 
      : subCatagory


  type subCatagoryCountArgs = Merge<
    Omit<subCatagoryFindManyArgs, 'select' | 'include'> & {
      select?: SubCatagoryCountAggregateInputType | true
    }
  >

  export interface subCatagoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one SubCatagory that matches the filter.
     * @param {subCatagoryFindUniqueArgs} args - Arguments to find a SubCatagory
     * @example
     * // Get one SubCatagory
     * const subCatagory = await prisma.subCatagory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends subCatagoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, subCatagoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'subCatagory'> extends True ? Prisma__subCatagoryClient<subCatagoryGetPayload<T>> : Prisma__subCatagoryClient<subCatagoryGetPayload<T> | null, null>

    /**
     * Find one SubCatagory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {subCatagoryFindUniqueOrThrowArgs} args - Arguments to find a SubCatagory
     * @example
     * // Get one SubCatagory
     * const subCatagory = await prisma.subCatagory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends subCatagoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, subCatagoryFindUniqueOrThrowArgs>
    ): Prisma__subCatagoryClient<subCatagoryGetPayload<T>>

    /**
     * Find the first SubCatagory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCatagoryFindFirstArgs} args - Arguments to find a SubCatagory
     * @example
     * // Get one SubCatagory
     * const subCatagory = await prisma.subCatagory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends subCatagoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, subCatagoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'subCatagory'> extends True ? Prisma__subCatagoryClient<subCatagoryGetPayload<T>> : Prisma__subCatagoryClient<subCatagoryGetPayload<T> | null, null>

    /**
     * Find the first SubCatagory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCatagoryFindFirstOrThrowArgs} args - Arguments to find a SubCatagory
     * @example
     * // Get one SubCatagory
     * const subCatagory = await prisma.subCatagory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends subCatagoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, subCatagoryFindFirstOrThrowArgs>
    ): Prisma__subCatagoryClient<subCatagoryGetPayload<T>>

    /**
     * Find zero or more SubCatagories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCatagoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubCatagories
     * const subCatagories = await prisma.subCatagory.findMany()
     * 
     * // Get first 10 SubCatagories
     * const subCatagories = await prisma.subCatagory.findMany({ take: 10 })
     * 
     * // Only select the `subatCagoryId`
     * const subCatagoryWithSubatCagoryIdOnly = await prisma.subCatagory.findMany({ select: { subatCagoryId: true } })
     * 
    **/
    findMany<T extends subCatagoryFindManyArgs>(
      args?: SelectSubset<T, subCatagoryFindManyArgs>
    ): PrismaPromise<Array<subCatagoryGetPayload<T>>>

    /**
     * Create a SubCatagory.
     * @param {subCatagoryCreateArgs} args - Arguments to create a SubCatagory.
     * @example
     * // Create one SubCatagory
     * const SubCatagory = await prisma.subCatagory.create({
     *   data: {
     *     // ... data to create a SubCatagory
     *   }
     * })
     * 
    **/
    create<T extends subCatagoryCreateArgs>(
      args: SelectSubset<T, subCatagoryCreateArgs>
    ): Prisma__subCatagoryClient<subCatagoryGetPayload<T>>

    /**
     * Create many SubCatagories.
     *     @param {subCatagoryCreateManyArgs} args - Arguments to create many SubCatagories.
     *     @example
     *     // Create many SubCatagories
     *     const subCatagory = await prisma.subCatagory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends subCatagoryCreateManyArgs>(
      args?: SelectSubset<T, subCatagoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SubCatagory.
     * @param {subCatagoryDeleteArgs} args - Arguments to delete one SubCatagory.
     * @example
     * // Delete one SubCatagory
     * const SubCatagory = await prisma.subCatagory.delete({
     *   where: {
     *     // ... filter to delete one SubCatagory
     *   }
     * })
     * 
    **/
    delete<T extends subCatagoryDeleteArgs>(
      args: SelectSubset<T, subCatagoryDeleteArgs>
    ): Prisma__subCatagoryClient<subCatagoryGetPayload<T>>

    /**
     * Update one SubCatagory.
     * @param {subCatagoryUpdateArgs} args - Arguments to update one SubCatagory.
     * @example
     * // Update one SubCatagory
     * const subCatagory = await prisma.subCatagory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends subCatagoryUpdateArgs>(
      args: SelectSubset<T, subCatagoryUpdateArgs>
    ): Prisma__subCatagoryClient<subCatagoryGetPayload<T>>

    /**
     * Delete zero or more SubCatagories.
     * @param {subCatagoryDeleteManyArgs} args - Arguments to filter SubCatagories to delete.
     * @example
     * // Delete a few SubCatagories
     * const { count } = await prisma.subCatagory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends subCatagoryDeleteManyArgs>(
      args?: SelectSubset<T, subCatagoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubCatagories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCatagoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubCatagories
     * const subCatagory = await prisma.subCatagory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends subCatagoryUpdateManyArgs>(
      args: SelectSubset<T, subCatagoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SubCatagory.
     * @param {subCatagoryUpsertArgs} args - Arguments to update or create a SubCatagory.
     * @example
     * // Update or create a SubCatagory
     * const subCatagory = await prisma.subCatagory.upsert({
     *   create: {
     *     // ... data to create a SubCatagory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubCatagory we want to update
     *   }
     * })
    **/
    upsert<T extends subCatagoryUpsertArgs>(
      args: SelectSubset<T, subCatagoryUpsertArgs>
    ): Prisma__subCatagoryClient<subCatagoryGetPayload<T>>

    /**
     * Count the number of SubCatagories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subCatagoryCountArgs} args - Arguments to filter SubCatagories to count.
     * @example
     * // Count the number of SubCatagories
     * const count = await prisma.subCatagory.count({
     *   where: {
     *     // ... the filter for the SubCatagories we want to count
     *   }
     * })
    **/
    count<T extends subCatagoryCountArgs>(
      args?: Subset<T, subCatagoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubCatagoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubCatagory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCatagoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubCatagoryAggregateArgs>(args: Subset<T, SubCatagoryAggregateArgs>): PrismaPromise<GetSubCatagoryAggregateType<T>>

    /**
     * Group by SubCatagory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCatagoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubCatagoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubCatagoryGroupByArgs['orderBy'] }
        : { orderBy?: SubCatagoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubCatagoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubCatagoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for subCatagory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__subCatagoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Product<T extends subCatagoryProductArgs= {}>(args?: Subset<T, subCatagoryProductArgs>): PrismaPromise<Array<productGetPayload<T>>| Null>;

    catogory<T extends catagoryArgs= {}>(args?: Subset<T, catagoryArgs>): Prisma__catagoryClient<catagoryGetPayload<T> | Null>;

    user<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * subCatagory base type for findUnique actions
   */
  export type subCatagoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    /**
     * Filter, which subCatagory to fetch.
     * 
    **/
    where: subCatagoryWhereUniqueInput
  }

  /**
   * subCatagory findUnique
   */
  export interface subCatagoryFindUniqueArgs extends subCatagoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * subCatagory findUniqueOrThrow
   */
  export type subCatagoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    /**
     * Filter, which subCatagory to fetch.
     * 
    **/
    where: subCatagoryWhereUniqueInput
  }


  /**
   * subCatagory base type for findFirst actions
   */
  export type subCatagoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    /**
     * Filter, which subCatagory to fetch.
     * 
    **/
    where?: subCatagoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCatagories to fetch.
     * 
    **/
    orderBy?: Enumerable<subCatagoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subCatagories.
     * 
    **/
    cursor?: subCatagoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCatagories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCatagories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subCatagories.
     * 
    **/
    distinct?: Enumerable<SubCatagoryScalarFieldEnum>
  }

  /**
   * subCatagory findFirst
   */
  export interface subCatagoryFindFirstArgs extends subCatagoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * subCatagory findFirstOrThrow
   */
  export type subCatagoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    /**
     * Filter, which subCatagory to fetch.
     * 
    **/
    where?: subCatagoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCatagories to fetch.
     * 
    **/
    orderBy?: Enumerable<subCatagoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subCatagories.
     * 
    **/
    cursor?: subCatagoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCatagories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCatagories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subCatagories.
     * 
    **/
    distinct?: Enumerable<SubCatagoryScalarFieldEnum>
  }


  /**
   * subCatagory findMany
   */
  export type subCatagoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    /**
     * Filter, which subCatagories to fetch.
     * 
    **/
    where?: subCatagoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subCatagories to fetch.
     * 
    **/
    orderBy?: Enumerable<subCatagoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subCatagories.
     * 
    **/
    cursor?: subCatagoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subCatagories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subCatagories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SubCatagoryScalarFieldEnum>
  }


  /**
   * subCatagory create
   */
  export type subCatagoryCreateArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    /**
     * The data needed to create a subCatagory.
     * 
    **/
    data: XOR<subCatagoryCreateInput, subCatagoryUncheckedCreateInput>
  }


  /**
   * subCatagory createMany
   */
  export type subCatagoryCreateManyArgs = {
    /**
     * The data used to create many subCatagories.
     * 
    **/
    data: Enumerable<subCatagoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * subCatagory update
   */
  export type subCatagoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    /**
     * The data needed to update a subCatagory.
     * 
    **/
    data: XOR<subCatagoryUpdateInput, subCatagoryUncheckedUpdateInput>
    /**
     * Choose, which subCatagory to update.
     * 
    **/
    where: subCatagoryWhereUniqueInput
  }


  /**
   * subCatagory updateMany
   */
  export type subCatagoryUpdateManyArgs = {
    /**
     * The data used to update subCatagories.
     * 
    **/
    data: XOR<subCatagoryUpdateManyMutationInput, subCatagoryUncheckedUpdateManyInput>
    /**
     * Filter which subCatagories to update
     * 
    **/
    where?: subCatagoryWhereInput
  }


  /**
   * subCatagory upsert
   */
  export type subCatagoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    /**
     * The filter to search for the subCatagory to update in case it exists.
     * 
    **/
    where: subCatagoryWhereUniqueInput
    /**
     * In case the subCatagory found by the `where` argument doesn't exist, create a new subCatagory with this data.
     * 
    **/
    create: XOR<subCatagoryCreateInput, subCatagoryUncheckedCreateInput>
    /**
     * In case the subCatagory was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<subCatagoryUpdateInput, subCatagoryUncheckedUpdateInput>
  }


  /**
   * subCatagory delete
   */
  export type subCatagoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    /**
     * Filter which subCatagory to delete.
     * 
    **/
    where: subCatagoryWhereUniqueInput
  }


  /**
   * subCatagory deleteMany
   */
  export type subCatagoryDeleteManyArgs = {
    /**
     * Filter which subCatagories to delete
     * 
    **/
    where?: subCatagoryWhereInput
  }


  /**
   * subCatagory.Product
   */
  export type subCatagoryProductArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithRelationInput>
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * subCatagory without action
   */
  export type subCatagoryArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
  }



  /**
   * Model catagory
   */


  export type AggregateCatagory = {
    _count: CatagoryCountAggregateOutputType | null
    _avg: CatagoryAvgAggregateOutputType | null
    _sum: CatagorySumAggregateOutputType | null
    _min: CatagoryMinAggregateOutputType | null
    _max: CatagoryMaxAggregateOutputType | null
  }

  export type CatagoryAvgAggregateOutputType = {
    CagoryId: number | null
    userId: number | null
  }

  export type CatagorySumAggregateOutputType = {
    CagoryId: number | null
    userId: number | null
  }

  export type CatagoryMinAggregateOutputType = {
    CagoryId: number | null
    type: string | null
    userId: number | null
  }

  export type CatagoryMaxAggregateOutputType = {
    CagoryId: number | null
    type: string | null
    userId: number | null
  }

  export type CatagoryCountAggregateOutputType = {
    CagoryId: number
    type: number
    userId: number
    _all: number
  }


  export type CatagoryAvgAggregateInputType = {
    CagoryId?: true
    userId?: true
  }

  export type CatagorySumAggregateInputType = {
    CagoryId?: true
    userId?: true
  }

  export type CatagoryMinAggregateInputType = {
    CagoryId?: true
    type?: true
    userId?: true
  }

  export type CatagoryMaxAggregateInputType = {
    CagoryId?: true
    type?: true
    userId?: true
  }

  export type CatagoryCountAggregateInputType = {
    CagoryId?: true
    type?: true
    userId?: true
    _all?: true
  }

  export type CatagoryAggregateArgs = {
    /**
     * Filter which catagory to aggregate.
     * 
    **/
    where?: catagoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of catagories to fetch.
     * 
    **/
    orderBy?: Enumerable<catagoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: catagoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` catagories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` catagories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned catagories
    **/
    _count?: true | CatagoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CatagoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CatagorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CatagoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CatagoryMaxAggregateInputType
  }

  export type GetCatagoryAggregateType<T extends CatagoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCatagory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCatagory[P]>
      : GetScalarType<T[P], AggregateCatagory[P]>
  }




  export type CatagoryGroupByArgs = {
    where?: catagoryWhereInput
    orderBy?: Enumerable<catagoryOrderByWithAggregationInput>
    by: Array<CatagoryScalarFieldEnum>
    having?: catagoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CatagoryCountAggregateInputType | true
    _avg?: CatagoryAvgAggregateInputType
    _sum?: CatagorySumAggregateInputType
    _min?: CatagoryMinAggregateInputType
    _max?: CatagoryMaxAggregateInputType
  }


  export type CatagoryGroupByOutputType = {
    CagoryId: number
    type: string
    userId: number
    _count: CatagoryCountAggregateOutputType | null
    _avg: CatagoryAvgAggregateOutputType | null
    _sum: CatagorySumAggregateOutputType | null
    _min: CatagoryMinAggregateOutputType | null
    _max: CatagoryMaxAggregateOutputType | null
  }

  type GetCatagoryGroupByPayload<T extends CatagoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CatagoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CatagoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CatagoryGroupByOutputType[P]>
            : GetScalarType<T[P], CatagoryGroupByOutputType[P]>
        }
      >
    >


  export type catagorySelect = {
    CagoryId?: boolean
    type?: boolean
    userId?: boolean
    users?: boolean | usersArgs
    subCategorie?: boolean | catagorySubCategorieArgs
    _count?: boolean | CatagoryCountOutputTypeArgs
  }


  export type catagoryInclude = {
    users?: boolean | usersArgs
    subCategorie?: boolean | catagorySubCategorieArgs
    _count?: boolean | CatagoryCountOutputTypeArgs
  } 

  export type catagoryGetPayload<S extends boolean | null | undefined | catagoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? catagory :
    S extends undefined ? never :
    S extends { include: any } & (catagoryArgs | catagoryFindManyArgs)
    ? catagory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<S['include'][P]> :
        P extends 'subCategorie' ? Array < subCatagoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? CatagoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (catagoryArgs | catagoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<S['select'][P]> :
        P extends 'subCategorie' ? Array < subCatagoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? CatagoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof catagory ? catagory[P] : never
  } 
      : catagory


  type catagoryCountArgs = Merge<
    Omit<catagoryFindManyArgs, 'select' | 'include'> & {
      select?: CatagoryCountAggregateInputType | true
    }
  >

  export interface catagoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Catagory that matches the filter.
     * @param {catagoryFindUniqueArgs} args - Arguments to find a Catagory
     * @example
     * // Get one Catagory
     * const catagory = await prisma.catagory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends catagoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, catagoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'catagory'> extends True ? Prisma__catagoryClient<catagoryGetPayload<T>> : Prisma__catagoryClient<catagoryGetPayload<T> | null, null>

    /**
     * Find one Catagory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {catagoryFindUniqueOrThrowArgs} args - Arguments to find a Catagory
     * @example
     * // Get one Catagory
     * const catagory = await prisma.catagory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends catagoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, catagoryFindUniqueOrThrowArgs>
    ): Prisma__catagoryClient<catagoryGetPayload<T>>

    /**
     * Find the first Catagory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {catagoryFindFirstArgs} args - Arguments to find a Catagory
     * @example
     * // Get one Catagory
     * const catagory = await prisma.catagory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends catagoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, catagoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'catagory'> extends True ? Prisma__catagoryClient<catagoryGetPayload<T>> : Prisma__catagoryClient<catagoryGetPayload<T> | null, null>

    /**
     * Find the first Catagory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {catagoryFindFirstOrThrowArgs} args - Arguments to find a Catagory
     * @example
     * // Get one Catagory
     * const catagory = await prisma.catagory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends catagoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, catagoryFindFirstOrThrowArgs>
    ): Prisma__catagoryClient<catagoryGetPayload<T>>

    /**
     * Find zero or more Catagories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {catagoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Catagories
     * const catagories = await prisma.catagory.findMany()
     * 
     * // Get first 10 Catagories
     * const catagories = await prisma.catagory.findMany({ take: 10 })
     * 
     * // Only select the `CagoryId`
     * const catagoryWithCagoryIdOnly = await prisma.catagory.findMany({ select: { CagoryId: true } })
     * 
    **/
    findMany<T extends catagoryFindManyArgs>(
      args?: SelectSubset<T, catagoryFindManyArgs>
    ): PrismaPromise<Array<catagoryGetPayload<T>>>

    /**
     * Create a Catagory.
     * @param {catagoryCreateArgs} args - Arguments to create a Catagory.
     * @example
     * // Create one Catagory
     * const Catagory = await prisma.catagory.create({
     *   data: {
     *     // ... data to create a Catagory
     *   }
     * })
     * 
    **/
    create<T extends catagoryCreateArgs>(
      args: SelectSubset<T, catagoryCreateArgs>
    ): Prisma__catagoryClient<catagoryGetPayload<T>>

    /**
     * Create many Catagories.
     *     @param {catagoryCreateManyArgs} args - Arguments to create many Catagories.
     *     @example
     *     // Create many Catagories
     *     const catagory = await prisma.catagory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends catagoryCreateManyArgs>(
      args?: SelectSubset<T, catagoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Catagory.
     * @param {catagoryDeleteArgs} args - Arguments to delete one Catagory.
     * @example
     * // Delete one Catagory
     * const Catagory = await prisma.catagory.delete({
     *   where: {
     *     // ... filter to delete one Catagory
     *   }
     * })
     * 
    **/
    delete<T extends catagoryDeleteArgs>(
      args: SelectSubset<T, catagoryDeleteArgs>
    ): Prisma__catagoryClient<catagoryGetPayload<T>>

    /**
     * Update one Catagory.
     * @param {catagoryUpdateArgs} args - Arguments to update one Catagory.
     * @example
     * // Update one Catagory
     * const catagory = await prisma.catagory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends catagoryUpdateArgs>(
      args: SelectSubset<T, catagoryUpdateArgs>
    ): Prisma__catagoryClient<catagoryGetPayload<T>>

    /**
     * Delete zero or more Catagories.
     * @param {catagoryDeleteManyArgs} args - Arguments to filter Catagories to delete.
     * @example
     * // Delete a few Catagories
     * const { count } = await prisma.catagory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends catagoryDeleteManyArgs>(
      args?: SelectSubset<T, catagoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Catagories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {catagoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Catagories
     * const catagory = await prisma.catagory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends catagoryUpdateManyArgs>(
      args: SelectSubset<T, catagoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Catagory.
     * @param {catagoryUpsertArgs} args - Arguments to update or create a Catagory.
     * @example
     * // Update or create a Catagory
     * const catagory = await prisma.catagory.upsert({
     *   create: {
     *     // ... data to create a Catagory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Catagory we want to update
     *   }
     * })
    **/
    upsert<T extends catagoryUpsertArgs>(
      args: SelectSubset<T, catagoryUpsertArgs>
    ): Prisma__catagoryClient<catagoryGetPayload<T>>

    /**
     * Count the number of Catagories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {catagoryCountArgs} args - Arguments to filter Catagories to count.
     * @example
     * // Count the number of Catagories
     * const count = await prisma.catagory.count({
     *   where: {
     *     // ... the filter for the Catagories we want to count
     *   }
     * })
    **/
    count<T extends catagoryCountArgs>(
      args?: Subset<T, catagoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CatagoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Catagory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatagoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CatagoryAggregateArgs>(args: Subset<T, CatagoryAggregateArgs>): PrismaPromise<GetCatagoryAggregateType<T>>

    /**
     * Group by Catagory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatagoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CatagoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CatagoryGroupByArgs['orderBy'] }
        : { orderBy?: CatagoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CatagoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCatagoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for catagory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__catagoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    subCategorie<T extends catagorySubCategorieArgs= {}>(args?: Subset<T, catagorySubCategorieArgs>): PrismaPromise<Array<subCatagoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * catagory base type for findUnique actions
   */
  export type catagoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    /**
     * Filter, which catagory to fetch.
     * 
    **/
    where: catagoryWhereUniqueInput
  }

  /**
   * catagory findUnique
   */
  export interface catagoryFindUniqueArgs extends catagoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * catagory findUniqueOrThrow
   */
  export type catagoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    /**
     * Filter, which catagory to fetch.
     * 
    **/
    where: catagoryWhereUniqueInput
  }


  /**
   * catagory base type for findFirst actions
   */
  export type catagoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    /**
     * Filter, which catagory to fetch.
     * 
    **/
    where?: catagoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of catagories to fetch.
     * 
    **/
    orderBy?: Enumerable<catagoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for catagories.
     * 
    **/
    cursor?: catagoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` catagories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` catagories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of catagories.
     * 
    **/
    distinct?: Enumerable<CatagoryScalarFieldEnum>
  }

  /**
   * catagory findFirst
   */
  export interface catagoryFindFirstArgs extends catagoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * catagory findFirstOrThrow
   */
  export type catagoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    /**
     * Filter, which catagory to fetch.
     * 
    **/
    where?: catagoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of catagories to fetch.
     * 
    **/
    orderBy?: Enumerable<catagoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for catagories.
     * 
    **/
    cursor?: catagoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` catagories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` catagories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of catagories.
     * 
    **/
    distinct?: Enumerable<CatagoryScalarFieldEnum>
  }


  /**
   * catagory findMany
   */
  export type catagoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    /**
     * Filter, which catagories to fetch.
     * 
    **/
    where?: catagoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of catagories to fetch.
     * 
    **/
    orderBy?: Enumerable<catagoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing catagories.
     * 
    **/
    cursor?: catagoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` catagories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` catagories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CatagoryScalarFieldEnum>
  }


  /**
   * catagory create
   */
  export type catagoryCreateArgs = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    /**
     * The data needed to create a catagory.
     * 
    **/
    data: XOR<catagoryCreateInput, catagoryUncheckedCreateInput>
  }


  /**
   * catagory createMany
   */
  export type catagoryCreateManyArgs = {
    /**
     * The data used to create many catagories.
     * 
    **/
    data: Enumerable<catagoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * catagory update
   */
  export type catagoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    /**
     * The data needed to update a catagory.
     * 
    **/
    data: XOR<catagoryUpdateInput, catagoryUncheckedUpdateInput>
    /**
     * Choose, which catagory to update.
     * 
    **/
    where: catagoryWhereUniqueInput
  }


  /**
   * catagory updateMany
   */
  export type catagoryUpdateManyArgs = {
    /**
     * The data used to update catagories.
     * 
    **/
    data: XOR<catagoryUpdateManyMutationInput, catagoryUncheckedUpdateManyInput>
    /**
     * Filter which catagories to update
     * 
    **/
    where?: catagoryWhereInput
  }


  /**
   * catagory upsert
   */
  export type catagoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    /**
     * The filter to search for the catagory to update in case it exists.
     * 
    **/
    where: catagoryWhereUniqueInput
    /**
     * In case the catagory found by the `where` argument doesn't exist, create a new catagory with this data.
     * 
    **/
    create: XOR<catagoryCreateInput, catagoryUncheckedCreateInput>
    /**
     * In case the catagory was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<catagoryUpdateInput, catagoryUncheckedUpdateInput>
  }


  /**
   * catagory delete
   */
  export type catagoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
    /**
     * Filter which catagory to delete.
     * 
    **/
    where: catagoryWhereUniqueInput
  }


  /**
   * catagory deleteMany
   */
  export type catagoryDeleteManyArgs = {
    /**
     * Filter which catagories to delete
     * 
    **/
    where?: catagoryWhereInput
  }


  /**
   * catagory.subCategorie
   */
  export type catagorySubCategorieArgs = {
    /**
     * Select specific fields to fetch from the subCatagory
     * 
    **/
    select?: subCatagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: subCatagoryInclude | null
    where?: subCatagoryWhereInput
    orderBy?: Enumerable<subCatagoryOrderByWithRelationInput>
    cursor?: subCatagoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SubCatagoryScalarFieldEnum>
  }


  /**
   * catagory without action
   */
  export type catagoryArgs = {
    /**
     * Select specific fields to fetch from the catagory
     * 
    **/
    select?: catagorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: catagoryInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CartScalarFieldEnum: {
    cartId: 'cartId',
    qty: 'qty',
    userId: 'userId',
    ProductId: 'ProductId'
  };

  export type CartScalarFieldEnum = (typeof CartScalarFieldEnum)[keyof typeof CartScalarFieldEnum]


  export const CatagoryScalarFieldEnum: {
    CagoryId: 'CagoryId',
    type: 'type',
    userId: 'userId'
  };

  export type CatagoryScalarFieldEnum = (typeof CatagoryScalarFieldEnum)[keyof typeof CatagoryScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createAt: 'createAt',
    is_paid: 'is_paid',
    is_deliveredn: 'is_deliveredn',
    ProductId: 'ProductId',
    cartId: 'cartId'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    ProductId: 'ProductId',
    title: 'title',
    Description: 'Description',
    Price: 'Price',
    img: 'img',
    Store: 'Store',
    userId: 'userId',
    subatCagoryId: 'subatCagoryId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SubCatagoryScalarFieldEnum: {
    subatCagoryId: 'subatCagoryId',
    type: 'type',
    img: 'img',
    CagoryId: 'CagoryId',
    userId: 'userId'
  };

  export type SubCatagoryScalarFieldEnum = (typeof SubCatagoryScalarFieldEnum)[keyof typeof SubCatagoryScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    userId: 'userId',
    FirstName: 'FirstName',
    LastName: 'LastName',
    Address: 'Address',
    Email: 'Email',
    Password: 'Password',
    Role: 'Role'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    userId?: IntFilter | number
    FirstName?: StringFilter | string
    LastName?: StringFilter | string
    Address?: StringNullableFilter | string | null
    Email?: StringFilter | string
    Password?: StringFilter | string
    Role?: EnumRolesFilter | Roles
    product?: ProductListRelationFilter
    cart?: CartListRelationFilter
    payment?: PaymentListRelationFilter
    catagory?: CatagoryListRelationFilter
    subCatagory?: SubCatagoryListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    userId?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    Address?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    product?: productOrderByRelationAggregateInput
    cart?: cartOrderByRelationAggregateInput
    payment?: paymentOrderByRelationAggregateInput
    catagory?: catagoryOrderByRelationAggregateInput
    subCatagory?: subCatagoryOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    userId?: number
    Email?: string
  }

  export type usersOrderByWithAggregationInput = {
    userId?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    Address?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    FirstName?: StringWithAggregatesFilter | string
    LastName?: StringWithAggregatesFilter | string
    Address?: StringNullableWithAggregatesFilter | string | null
    Email?: StringWithAggregatesFilter | string
    Password?: StringWithAggregatesFilter | string
    Role?: EnumRolesWithAggregatesFilter | Roles
  }

  export type productWhereInput = {
    AND?: Enumerable<productWhereInput>
    OR?: Enumerable<productWhereInput>
    NOT?: Enumerable<productWhereInput>
    ProductId?: IntFilter | number
    title?: StringFilter | string
    Description?: StringNullableFilter | string | null
    Price?: StringFilter | string
    img?: StringFilter | string
    Store?: StringFilter | string
    userId?: IntFilter | number
    subatCagoryId?: IntFilter | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
    subCatagory?: XOR<SubCatagoryRelationFilter, subCatagoryWhereInput>
    cart?: CartListRelationFilter
    payment?: PaymentListRelationFilter
  }

  export type productOrderByWithRelationInput = {
    ProductId?: SortOrder
    title?: SortOrder
    Description?: SortOrder
    Price?: SortOrder
    img?: SortOrder
    Store?: SortOrder
    userId?: SortOrder
    subatCagoryId?: SortOrder
    users?: usersOrderByWithRelationInput
    subCatagory?: subCatagoryOrderByWithRelationInput
    cart?: cartOrderByRelationAggregateInput
    payment?: paymentOrderByRelationAggregateInput
  }

  export type productWhereUniqueInput = {
    ProductId?: number
  }

  export type productOrderByWithAggregationInput = {
    ProductId?: SortOrder
    title?: SortOrder
    Description?: SortOrder
    Price?: SortOrder
    img?: SortOrder
    Store?: SortOrder
    userId?: SortOrder
    subatCagoryId?: SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productScalarWhereWithAggregatesInput>
    OR?: Enumerable<productScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productScalarWhereWithAggregatesInput>
    ProductId?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    Description?: StringNullableWithAggregatesFilter | string | null
    Price?: StringWithAggregatesFilter | string
    img?: StringWithAggregatesFilter | string
    Store?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    subatCagoryId?: IntWithAggregatesFilter | number
  }

  export type cartWhereInput = {
    AND?: Enumerable<cartWhereInput>
    OR?: Enumerable<cartWhereInput>
    NOT?: Enumerable<cartWhereInput>
    cartId?: IntFilter | number
    qty?: IntFilter | number
    userId?: IntFilter | number
    ProductId?: IntFilter | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
    payment?: PaymentListRelationFilter
  }

  export type cartOrderByWithRelationInput = {
    cartId?: SortOrder
    qty?: SortOrder
    userId?: SortOrder
    ProductId?: SortOrder
    users?: usersOrderByWithRelationInput
    product?: productOrderByWithRelationInput
    payment?: paymentOrderByRelationAggregateInput
  }

  export type cartWhereUniqueInput = {
    cartId?: number
  }

  export type cartOrderByWithAggregationInput = {
    cartId?: SortOrder
    qty?: SortOrder
    userId?: SortOrder
    ProductId?: SortOrder
    _count?: cartCountOrderByAggregateInput
    _avg?: cartAvgOrderByAggregateInput
    _max?: cartMaxOrderByAggregateInput
    _min?: cartMinOrderByAggregateInput
    _sum?: cartSumOrderByAggregateInput
  }

  export type cartScalarWhereWithAggregatesInput = {
    AND?: Enumerable<cartScalarWhereWithAggregatesInput>
    OR?: Enumerable<cartScalarWhereWithAggregatesInput>
    NOT?: Enumerable<cartScalarWhereWithAggregatesInput>
    cartId?: IntWithAggregatesFilter | number
    qty?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    ProductId?: IntWithAggregatesFilter | number
  }

  export type paymentWhereInput = {
    AND?: Enumerable<paymentWhereInput>
    OR?: Enumerable<paymentWhereInput>
    NOT?: Enumerable<paymentWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    createAt?: IntNullableFilter | number | null
    is_paid?: BoolFilter | boolean
    is_deliveredn?: BoolFilter | boolean
    ProductId?: IntFilter | number
    cartId?: IntFilter | number
    product?: XOR<ProductRelationFilter, productWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
    cart?: XOR<CartRelationFilter, cartWhereInput>
  }

  export type paymentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createAt?: SortOrder
    is_paid?: SortOrder
    is_deliveredn?: SortOrder
    ProductId?: SortOrder
    cartId?: SortOrder
    product?: productOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    cart?: cartOrderByWithRelationInput
  }

  export type paymentWhereUniqueInput = {
    id?: number
  }

  export type paymentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createAt?: SortOrder
    is_paid?: SortOrder
    is_deliveredn?: SortOrder
    ProductId?: SortOrder
    cartId?: SortOrder
    _count?: paymentCountOrderByAggregateInput
    _avg?: paymentAvgOrderByAggregateInput
    _max?: paymentMaxOrderByAggregateInput
    _min?: paymentMinOrderByAggregateInput
    _sum?: paymentSumOrderByAggregateInput
  }

  export type paymentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<paymentScalarWhereWithAggregatesInput>
    OR?: Enumerable<paymentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<paymentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    createAt?: IntNullableWithAggregatesFilter | number | null
    is_paid?: BoolWithAggregatesFilter | boolean
    is_deliveredn?: BoolWithAggregatesFilter | boolean
    ProductId?: IntWithAggregatesFilter | number
    cartId?: IntWithAggregatesFilter | number
  }

  export type subCatagoryWhereInput = {
    AND?: Enumerable<subCatagoryWhereInput>
    OR?: Enumerable<subCatagoryWhereInput>
    NOT?: Enumerable<subCatagoryWhereInput>
    subatCagoryId?: IntFilter | number
    type?: StringFilter | string
    img?: StringFilter | string
    CagoryId?: IntFilter | number
    Product?: ProductListRelationFilter
    catogory?: XOR<CatagoryRelationFilter, catagoryWhereInput>
    userId?: IntFilter | number
    user?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type subCatagoryOrderByWithRelationInput = {
    subatCagoryId?: SortOrder
    type?: SortOrder
    img?: SortOrder
    CagoryId?: SortOrder
    Product?: productOrderByRelationAggregateInput
    catogory?: catagoryOrderByWithRelationInput
    userId?: SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type subCatagoryWhereUniqueInput = {
    subatCagoryId?: number
  }

  export type subCatagoryOrderByWithAggregationInput = {
    subatCagoryId?: SortOrder
    type?: SortOrder
    img?: SortOrder
    CagoryId?: SortOrder
    userId?: SortOrder
    _count?: subCatagoryCountOrderByAggregateInput
    _avg?: subCatagoryAvgOrderByAggregateInput
    _max?: subCatagoryMaxOrderByAggregateInput
    _min?: subCatagoryMinOrderByAggregateInput
    _sum?: subCatagorySumOrderByAggregateInput
  }

  export type subCatagoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<subCatagoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<subCatagoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<subCatagoryScalarWhereWithAggregatesInput>
    subatCagoryId?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    img?: StringWithAggregatesFilter | string
    CagoryId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
  }

  export type catagoryWhereInput = {
    AND?: Enumerable<catagoryWhereInput>
    OR?: Enumerable<catagoryWhereInput>
    NOT?: Enumerable<catagoryWhereInput>
    CagoryId?: IntFilter | number
    type?: StringFilter | string
    userId?: IntFilter | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
    subCategorie?: SubCatagoryListRelationFilter
  }

  export type catagoryOrderByWithRelationInput = {
    CagoryId?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    users?: usersOrderByWithRelationInput
    subCategorie?: subCatagoryOrderByRelationAggregateInput
  }

  export type catagoryWhereUniqueInput = {
    CagoryId?: number
  }

  export type catagoryOrderByWithAggregationInput = {
    CagoryId?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    _count?: catagoryCountOrderByAggregateInput
    _avg?: catagoryAvgOrderByAggregateInput
    _max?: catagoryMaxOrderByAggregateInput
    _min?: catagoryMinOrderByAggregateInput
    _sum?: catagorySumOrderByAggregateInput
  }

  export type catagoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<catagoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<catagoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<catagoryScalarWhereWithAggregatesInput>
    CagoryId?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
  }

  export type usersCreateInput = {
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productCreateNestedManyWithoutUsersInput
    cart?: cartCreateNestedManyWithoutUsersInput
    payment?: paymentCreateNestedManyWithoutUsersInput
    catagory?: catagoryCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    userId?: number
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productUncheckedCreateNestedManyWithoutUsersInput
    cart?: cartUncheckedCreateNestedManyWithoutUsersInput
    payment?: paymentUncheckedCreateNestedManyWithoutUsersInput
    catagory?: catagoryUncheckedCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersUpdateInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUpdateManyWithoutUsersNestedInput
    cart?: cartUpdateManyWithoutUsersNestedInput
    payment?: paymentUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUncheckedUpdateManyWithoutUsersNestedInput
    cart?: cartUncheckedUpdateManyWithoutUsersNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUncheckedUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    userId?: number
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
  }

  export type usersUpdateManyMutationInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
  }

  export type usersUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
  }

  export type productCreateInput = {
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    users: usersCreateNestedOneWithoutProductInput
    subCatagory: subCatagoryCreateNestedOneWithoutProductInput
    cart?: cartCreateNestedManyWithoutProductInput
    payment?: paymentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    ProductId?: number
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    userId: number
    subatCagoryId: number
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    payment?: paymentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutProductNestedInput
    subCatagory?: subCatagoryUpdateOneRequiredWithoutProductNestedInput
    cart?: cartUpdateManyWithoutProductNestedInput
    payment?: paymentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateInput = {
    ProductId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    payment?: paymentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateManyInput = {
    ProductId?: number
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    userId: number
    subatCagoryId: number
  }

  export type productUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
  }

  export type productUncheckedUpdateManyInput = {
    ProductId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    subatCagoryId?: IntFieldUpdateOperationsInput | number
  }

  export type cartCreateInput = {
    qty: number
    users: usersCreateNestedOneWithoutCartInput
    product: productCreateNestedOneWithoutCartInput
    payment?: paymentCreateNestedManyWithoutCartInput
  }

  export type cartUncheckedCreateInput = {
    cartId?: number
    qty: number
    userId: number
    ProductId: number
    payment?: paymentUncheckedCreateNestedManyWithoutCartInput
  }

  export type cartUpdateInput = {
    qty?: IntFieldUpdateOperationsInput | number
    users?: usersUpdateOneRequiredWithoutCartNestedInput
    product?: productUpdateOneRequiredWithoutCartNestedInput
    payment?: paymentUpdateManyWithoutCartNestedInput
  }

  export type cartUncheckedUpdateInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    ProductId?: IntFieldUpdateOperationsInput | number
    payment?: paymentUncheckedUpdateManyWithoutCartNestedInput
  }

  export type cartCreateManyInput = {
    cartId?: number
    qty: number
    userId: number
    ProductId: number
  }

  export type cartUpdateManyMutationInput = {
    qty?: IntFieldUpdateOperationsInput | number
  }

  export type cartUncheckedUpdateManyInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    ProductId?: IntFieldUpdateOperationsInput | number
  }

  export type paymentCreateInput = {
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    product: productCreateNestedOneWithoutPaymentInput
    users: usersCreateNestedOneWithoutPaymentInput
    cart: cartCreateNestedOneWithoutPaymentInput
  }

  export type paymentUncheckedCreateInput = {
    id?: number
    userId: number
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    ProductId: number
    cartId: number
  }

  export type paymentUpdateInput = {
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    product?: productUpdateOneRequiredWithoutPaymentNestedInput
    users?: usersUpdateOneRequiredWithoutPaymentNestedInput
    cart?: cartUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    ProductId?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
  }

  export type paymentCreateManyInput = {
    id?: number
    userId: number
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    ProductId: number
    cartId: number
  }

  export type paymentUpdateManyMutationInput = {
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
  }

  export type paymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    ProductId?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
  }

  export type subCatagoryCreateInput = {
    type: string
    img: string
    Product?: productCreateNestedManyWithoutSubCatagoryInput
    catogory: catagoryCreateNestedOneWithoutSubCategorieInput
    user: usersCreateNestedOneWithoutSubCatagoryInput
  }

  export type subCatagoryUncheckedCreateInput = {
    subatCagoryId?: number
    type: string
    img: string
    CagoryId: number
    Product?: productUncheckedCreateNestedManyWithoutSubCatagoryInput
    userId: number
  }

  export type subCatagoryUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Product?: productUpdateManyWithoutSubCatagoryNestedInput
    catogory?: catagoryUpdateOneRequiredWithoutSubCategorieNestedInput
    user?: usersUpdateOneRequiredWithoutSubCatagoryNestedInput
  }

  export type subCatagoryUncheckedUpdateInput = {
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    CagoryId?: IntFieldUpdateOperationsInput | number
    Product?: productUncheckedUpdateManyWithoutSubCatagoryNestedInput
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type subCatagoryCreateManyInput = {
    subatCagoryId?: number
    type: string
    img: string
    CagoryId: number
    userId: number
  }

  export type subCatagoryUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
  }

  export type subCatagoryUncheckedUpdateManyInput = {
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    CagoryId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type catagoryCreateInput = {
    type: string
    users: usersCreateNestedOneWithoutCatagoryInput
    subCategorie?: subCatagoryCreateNestedManyWithoutCatogoryInput
  }

  export type catagoryUncheckedCreateInput = {
    CagoryId?: number
    type: string
    userId: number
    subCategorie?: subCatagoryUncheckedCreateNestedManyWithoutCatogoryInput
  }

  export type catagoryUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutCatagoryNestedInput
    subCategorie?: subCatagoryUpdateManyWithoutCatogoryNestedInput
  }

  export type catagoryUncheckedUpdateInput = {
    CagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    subCategorie?: subCatagoryUncheckedUpdateManyWithoutCatogoryNestedInput
  }

  export type catagoryCreateManyInput = {
    CagoryId?: number
    type: string
    userId: number
  }

  export type catagoryUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type catagoryUncheckedUpdateManyInput = {
    CagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumRolesFilter = {
    equals?: Roles
    in?: Enumerable<Roles>
    notIn?: Enumerable<Roles>
    not?: NestedEnumRolesFilter | Roles
  }

  export type ProductListRelationFilter = {
    every?: productWhereInput
    some?: productWhereInput
    none?: productWhereInput
  }

  export type CartListRelationFilter = {
    every?: cartWhereInput
    some?: cartWhereInput
    none?: cartWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: paymentWhereInput
    some?: paymentWhereInput
    none?: paymentWhereInput
  }

  export type CatagoryListRelationFilter = {
    every?: catagoryWhereInput
    some?: catagoryWhereInput
    none?: catagoryWhereInput
  }

  export type SubCatagoryListRelationFilter = {
    every?: subCatagoryWhereInput
    some?: subCatagoryWhereInput
    none?: subCatagoryWhereInput
  }

  export type productOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type cartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type paymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type catagoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type subCatagoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    userId?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    Address?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    userId?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    Address?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    userId?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    Address?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumRolesWithAggregatesFilter = {
    equals?: Roles
    in?: Enumerable<Roles>
    notIn?: Enumerable<Roles>
    not?: NestedEnumRolesWithAggregatesFilter | Roles
    _count?: NestedIntFilter
    _min?: NestedEnumRolesFilter
    _max?: NestedEnumRolesFilter
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type SubCatagoryRelationFilter = {
    is?: subCatagoryWhereInput
    isNot?: subCatagoryWhereInput
  }

  export type productCountOrderByAggregateInput = {
    ProductId?: SortOrder
    title?: SortOrder
    Description?: SortOrder
    Price?: SortOrder
    img?: SortOrder
    Store?: SortOrder
    userId?: SortOrder
    subatCagoryId?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    ProductId?: SortOrder
    userId?: SortOrder
    subatCagoryId?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    ProductId?: SortOrder
    title?: SortOrder
    Description?: SortOrder
    Price?: SortOrder
    img?: SortOrder
    Store?: SortOrder
    userId?: SortOrder
    subatCagoryId?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    ProductId?: SortOrder
    title?: SortOrder
    Description?: SortOrder
    Price?: SortOrder
    img?: SortOrder
    Store?: SortOrder
    userId?: SortOrder
    subatCagoryId?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    ProductId?: SortOrder
    userId?: SortOrder
    subatCagoryId?: SortOrder
  }

  export type ProductRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type cartCountOrderByAggregateInput = {
    cartId?: SortOrder
    qty?: SortOrder
    userId?: SortOrder
    ProductId?: SortOrder
  }

  export type cartAvgOrderByAggregateInput = {
    cartId?: SortOrder
    qty?: SortOrder
    userId?: SortOrder
    ProductId?: SortOrder
  }

  export type cartMaxOrderByAggregateInput = {
    cartId?: SortOrder
    qty?: SortOrder
    userId?: SortOrder
    ProductId?: SortOrder
  }

  export type cartMinOrderByAggregateInput = {
    cartId?: SortOrder
    qty?: SortOrder
    userId?: SortOrder
    ProductId?: SortOrder
  }

  export type cartSumOrderByAggregateInput = {
    cartId?: SortOrder
    qty?: SortOrder
    userId?: SortOrder
    ProductId?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type CartRelationFilter = {
    is?: cartWhereInput
    isNot?: cartWhereInput
  }

  export type paymentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createAt?: SortOrder
    is_paid?: SortOrder
    is_deliveredn?: SortOrder
    ProductId?: SortOrder
    cartId?: SortOrder
  }

  export type paymentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createAt?: SortOrder
    ProductId?: SortOrder
    cartId?: SortOrder
  }

  export type paymentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createAt?: SortOrder
    is_paid?: SortOrder
    is_deliveredn?: SortOrder
    ProductId?: SortOrder
    cartId?: SortOrder
  }

  export type paymentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createAt?: SortOrder
    is_paid?: SortOrder
    is_deliveredn?: SortOrder
    ProductId?: SortOrder
    cartId?: SortOrder
  }

  export type paymentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createAt?: SortOrder
    ProductId?: SortOrder
    cartId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type CatagoryRelationFilter = {
    is?: catagoryWhereInput
    isNot?: catagoryWhereInput
  }

  export type subCatagoryCountOrderByAggregateInput = {
    subatCagoryId?: SortOrder
    type?: SortOrder
    img?: SortOrder
    CagoryId?: SortOrder
    userId?: SortOrder
  }

  export type subCatagoryAvgOrderByAggregateInput = {
    subatCagoryId?: SortOrder
    CagoryId?: SortOrder
    userId?: SortOrder
  }

  export type subCatagoryMaxOrderByAggregateInput = {
    subatCagoryId?: SortOrder
    type?: SortOrder
    img?: SortOrder
    CagoryId?: SortOrder
    userId?: SortOrder
  }

  export type subCatagoryMinOrderByAggregateInput = {
    subatCagoryId?: SortOrder
    type?: SortOrder
    img?: SortOrder
    CagoryId?: SortOrder
    userId?: SortOrder
  }

  export type subCatagorySumOrderByAggregateInput = {
    subatCagoryId?: SortOrder
    CagoryId?: SortOrder
    userId?: SortOrder
  }

  export type catagoryCountOrderByAggregateInput = {
    CagoryId?: SortOrder
    type?: SortOrder
    userId?: SortOrder
  }

  export type catagoryAvgOrderByAggregateInput = {
    CagoryId?: SortOrder
    userId?: SortOrder
  }

  export type catagoryMaxOrderByAggregateInput = {
    CagoryId?: SortOrder
    type?: SortOrder
    userId?: SortOrder
  }

  export type catagoryMinOrderByAggregateInput = {
    CagoryId?: SortOrder
    type?: SortOrder
    userId?: SortOrder
  }

  export type catagorySumOrderByAggregateInput = {
    CagoryId?: SortOrder
    userId?: SortOrder
  }

  export type productCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<productCreateWithoutUsersInput>, Enumerable<productUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutUsersInput>
    createMany?: productCreateManyUsersInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type cartCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<cartCreateWithoutUsersInput>, Enumerable<cartUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutUsersInput>
    createMany?: cartCreateManyUsersInputEnvelope
    connect?: Enumerable<cartWhereUniqueInput>
  }

  export type paymentCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<paymentCreateWithoutUsersInput>, Enumerable<paymentUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutUsersInput>
    createMany?: paymentCreateManyUsersInputEnvelope
    connect?: Enumerable<paymentWhereUniqueInput>
  }

  export type catagoryCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<catagoryCreateWithoutUsersInput>, Enumerable<catagoryUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<catagoryCreateOrConnectWithoutUsersInput>
    createMany?: catagoryCreateManyUsersInputEnvelope
    connect?: Enumerable<catagoryWhereUniqueInput>
  }

  export type subCatagoryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<subCatagoryCreateWithoutUserInput>, Enumerable<subCatagoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<subCatagoryCreateOrConnectWithoutUserInput>
    createMany?: subCatagoryCreateManyUserInputEnvelope
    connect?: Enumerable<subCatagoryWhereUniqueInput>
  }

  export type productUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<productCreateWithoutUsersInput>, Enumerable<productUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutUsersInput>
    createMany?: productCreateManyUsersInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type cartUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<cartCreateWithoutUsersInput>, Enumerable<cartUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutUsersInput>
    createMany?: cartCreateManyUsersInputEnvelope
    connect?: Enumerable<cartWhereUniqueInput>
  }

  export type paymentUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<paymentCreateWithoutUsersInput>, Enumerable<paymentUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutUsersInput>
    createMany?: paymentCreateManyUsersInputEnvelope
    connect?: Enumerable<paymentWhereUniqueInput>
  }

  export type catagoryUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<catagoryCreateWithoutUsersInput>, Enumerable<catagoryUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<catagoryCreateOrConnectWithoutUsersInput>
    createMany?: catagoryCreateManyUsersInputEnvelope
    connect?: Enumerable<catagoryWhereUniqueInput>
  }

  export type subCatagoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<subCatagoryCreateWithoutUserInput>, Enumerable<subCatagoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<subCatagoryCreateOrConnectWithoutUserInput>
    createMany?: subCatagoryCreateManyUserInputEnvelope
    connect?: Enumerable<subCatagoryWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRolesFieldUpdateOperationsInput = {
    set?: Roles
  }

  export type productUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutUsersInput>, Enumerable<productUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: productCreateManyUsersInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type cartUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<cartCreateWithoutUsersInput>, Enumerable<cartUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<cartUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: cartCreateManyUsersInputEnvelope
    set?: Enumerable<cartWhereUniqueInput>
    disconnect?: Enumerable<cartWhereUniqueInput>
    delete?: Enumerable<cartWhereUniqueInput>
    connect?: Enumerable<cartWhereUniqueInput>
    update?: Enumerable<cartUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<cartUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<cartScalarWhereInput>
  }

  export type paymentUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<paymentCreateWithoutUsersInput>, Enumerable<paymentUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<paymentUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: paymentCreateManyUsersInputEnvelope
    set?: Enumerable<paymentWhereUniqueInput>
    disconnect?: Enumerable<paymentWhereUniqueInput>
    delete?: Enumerable<paymentWhereUniqueInput>
    connect?: Enumerable<paymentWhereUniqueInput>
    update?: Enumerable<paymentUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<paymentUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<paymentScalarWhereInput>
  }

  export type catagoryUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<catagoryCreateWithoutUsersInput>, Enumerable<catagoryUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<catagoryCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<catagoryUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: catagoryCreateManyUsersInputEnvelope
    set?: Enumerable<catagoryWhereUniqueInput>
    disconnect?: Enumerable<catagoryWhereUniqueInput>
    delete?: Enumerable<catagoryWhereUniqueInput>
    connect?: Enumerable<catagoryWhereUniqueInput>
    update?: Enumerable<catagoryUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<catagoryUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<catagoryScalarWhereInput>
  }

  export type subCatagoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<subCatagoryCreateWithoutUserInput>, Enumerable<subCatagoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<subCatagoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<subCatagoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: subCatagoryCreateManyUserInputEnvelope
    set?: Enumerable<subCatagoryWhereUniqueInput>
    disconnect?: Enumerable<subCatagoryWhereUniqueInput>
    delete?: Enumerable<subCatagoryWhereUniqueInput>
    connect?: Enumerable<subCatagoryWhereUniqueInput>
    update?: Enumerable<subCatagoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<subCatagoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<subCatagoryScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type productUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutUsersInput>, Enumerable<productUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: productCreateManyUsersInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type cartUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<cartCreateWithoutUsersInput>, Enumerable<cartUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<cartUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: cartCreateManyUsersInputEnvelope
    set?: Enumerable<cartWhereUniqueInput>
    disconnect?: Enumerable<cartWhereUniqueInput>
    delete?: Enumerable<cartWhereUniqueInput>
    connect?: Enumerable<cartWhereUniqueInput>
    update?: Enumerable<cartUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<cartUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<cartScalarWhereInput>
  }

  export type paymentUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<paymentCreateWithoutUsersInput>, Enumerable<paymentUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<paymentUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: paymentCreateManyUsersInputEnvelope
    set?: Enumerable<paymentWhereUniqueInput>
    disconnect?: Enumerable<paymentWhereUniqueInput>
    delete?: Enumerable<paymentWhereUniqueInput>
    connect?: Enumerable<paymentWhereUniqueInput>
    update?: Enumerable<paymentUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<paymentUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<paymentScalarWhereInput>
  }

  export type catagoryUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<catagoryCreateWithoutUsersInput>, Enumerable<catagoryUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<catagoryCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<catagoryUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: catagoryCreateManyUsersInputEnvelope
    set?: Enumerable<catagoryWhereUniqueInput>
    disconnect?: Enumerable<catagoryWhereUniqueInput>
    delete?: Enumerable<catagoryWhereUniqueInput>
    connect?: Enumerable<catagoryWhereUniqueInput>
    update?: Enumerable<catagoryUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<catagoryUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<catagoryScalarWhereInput>
  }

  export type subCatagoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<subCatagoryCreateWithoutUserInput>, Enumerable<subCatagoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<subCatagoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<subCatagoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: subCatagoryCreateManyUserInputEnvelope
    set?: Enumerable<subCatagoryWhereUniqueInput>
    disconnect?: Enumerable<subCatagoryWhereUniqueInput>
    delete?: Enumerable<subCatagoryWhereUniqueInput>
    connect?: Enumerable<subCatagoryWhereUniqueInput>
    update?: Enumerable<subCatagoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<subCatagoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<subCatagoryScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutProductInput = {
    create?: XOR<usersCreateWithoutProductInput, usersUncheckedCreateWithoutProductInput>
    connectOrCreate?: usersCreateOrConnectWithoutProductInput
    connect?: usersWhereUniqueInput
  }

  export type subCatagoryCreateNestedOneWithoutProductInput = {
    create?: XOR<subCatagoryCreateWithoutProductInput, subCatagoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: subCatagoryCreateOrConnectWithoutProductInput
    connect?: subCatagoryWhereUniqueInput
  }

  export type cartCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<cartCreateWithoutProductInput>, Enumerable<cartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutProductInput>
    createMany?: cartCreateManyProductInputEnvelope
    connect?: Enumerable<cartWhereUniqueInput>
  }

  export type paymentCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<paymentCreateWithoutProductInput>, Enumerable<paymentUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutProductInput>
    createMany?: paymentCreateManyProductInputEnvelope
    connect?: Enumerable<paymentWhereUniqueInput>
  }

  export type cartUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<cartCreateWithoutProductInput>, Enumerable<cartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutProductInput>
    createMany?: cartCreateManyProductInputEnvelope
    connect?: Enumerable<cartWhereUniqueInput>
  }

  export type paymentUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<paymentCreateWithoutProductInput>, Enumerable<paymentUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutProductInput>
    createMany?: paymentCreateManyProductInputEnvelope
    connect?: Enumerable<paymentWhereUniqueInput>
  }

  export type usersUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<usersCreateWithoutProductInput, usersUncheckedCreateWithoutProductInput>
    connectOrCreate?: usersCreateOrConnectWithoutProductInput
    upsert?: usersUpsertWithoutProductInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutProductInput, usersUncheckedUpdateWithoutProductInput>
  }

  export type subCatagoryUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<subCatagoryCreateWithoutProductInput, subCatagoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: subCatagoryCreateOrConnectWithoutProductInput
    upsert?: subCatagoryUpsertWithoutProductInput
    connect?: subCatagoryWhereUniqueInput
    update?: XOR<subCatagoryUpdateWithoutProductInput, subCatagoryUncheckedUpdateWithoutProductInput>
  }

  export type cartUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<cartCreateWithoutProductInput>, Enumerable<cartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<cartUpsertWithWhereUniqueWithoutProductInput>
    createMany?: cartCreateManyProductInputEnvelope
    set?: Enumerable<cartWhereUniqueInput>
    disconnect?: Enumerable<cartWhereUniqueInput>
    delete?: Enumerable<cartWhereUniqueInput>
    connect?: Enumerable<cartWhereUniqueInput>
    update?: Enumerable<cartUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<cartUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<cartScalarWhereInput>
  }

  export type paymentUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<paymentCreateWithoutProductInput>, Enumerable<paymentUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<paymentUpsertWithWhereUniqueWithoutProductInput>
    createMany?: paymentCreateManyProductInputEnvelope
    set?: Enumerable<paymentWhereUniqueInput>
    disconnect?: Enumerable<paymentWhereUniqueInput>
    delete?: Enumerable<paymentWhereUniqueInput>
    connect?: Enumerable<paymentWhereUniqueInput>
    update?: Enumerable<paymentUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<paymentUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<paymentScalarWhereInput>
  }

  export type cartUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<cartCreateWithoutProductInput>, Enumerable<cartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<cartUpsertWithWhereUniqueWithoutProductInput>
    createMany?: cartCreateManyProductInputEnvelope
    set?: Enumerable<cartWhereUniqueInput>
    disconnect?: Enumerable<cartWhereUniqueInput>
    delete?: Enumerable<cartWhereUniqueInput>
    connect?: Enumerable<cartWhereUniqueInput>
    update?: Enumerable<cartUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<cartUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<cartScalarWhereInput>
  }

  export type paymentUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<paymentCreateWithoutProductInput>, Enumerable<paymentUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<paymentUpsertWithWhereUniqueWithoutProductInput>
    createMany?: paymentCreateManyProductInputEnvelope
    set?: Enumerable<paymentWhereUniqueInput>
    disconnect?: Enumerable<paymentWhereUniqueInput>
    delete?: Enumerable<paymentWhereUniqueInput>
    connect?: Enumerable<paymentWhereUniqueInput>
    update?: Enumerable<paymentUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<paymentUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<paymentScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutCartInput = {
    create?: XOR<usersCreateWithoutCartInput, usersUncheckedCreateWithoutCartInput>
    connectOrCreate?: usersCreateOrConnectWithoutCartInput
    connect?: usersWhereUniqueInput
  }

  export type productCreateNestedOneWithoutCartInput = {
    create?: XOR<productCreateWithoutCartInput, productUncheckedCreateWithoutCartInput>
    connectOrCreate?: productCreateOrConnectWithoutCartInput
    connect?: productWhereUniqueInput
  }

  export type paymentCreateNestedManyWithoutCartInput = {
    create?: XOR<Enumerable<paymentCreateWithoutCartInput>, Enumerable<paymentUncheckedCreateWithoutCartInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutCartInput>
    createMany?: paymentCreateManyCartInputEnvelope
    connect?: Enumerable<paymentWhereUniqueInput>
  }

  export type paymentUncheckedCreateNestedManyWithoutCartInput = {
    create?: XOR<Enumerable<paymentCreateWithoutCartInput>, Enumerable<paymentUncheckedCreateWithoutCartInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutCartInput>
    createMany?: paymentCreateManyCartInputEnvelope
    connect?: Enumerable<paymentWhereUniqueInput>
  }

  export type usersUpdateOneRequiredWithoutCartNestedInput = {
    create?: XOR<usersCreateWithoutCartInput, usersUncheckedCreateWithoutCartInput>
    connectOrCreate?: usersCreateOrConnectWithoutCartInput
    upsert?: usersUpsertWithoutCartInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCartInput, usersUncheckedUpdateWithoutCartInput>
  }

  export type productUpdateOneRequiredWithoutCartNestedInput = {
    create?: XOR<productCreateWithoutCartInput, productUncheckedCreateWithoutCartInput>
    connectOrCreate?: productCreateOrConnectWithoutCartInput
    upsert?: productUpsertWithoutCartInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutCartInput, productUncheckedUpdateWithoutCartInput>
  }

  export type paymentUpdateManyWithoutCartNestedInput = {
    create?: XOR<Enumerable<paymentCreateWithoutCartInput>, Enumerable<paymentUncheckedCreateWithoutCartInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutCartInput>
    upsert?: Enumerable<paymentUpsertWithWhereUniqueWithoutCartInput>
    createMany?: paymentCreateManyCartInputEnvelope
    set?: Enumerable<paymentWhereUniqueInput>
    disconnect?: Enumerable<paymentWhereUniqueInput>
    delete?: Enumerable<paymentWhereUniqueInput>
    connect?: Enumerable<paymentWhereUniqueInput>
    update?: Enumerable<paymentUpdateWithWhereUniqueWithoutCartInput>
    updateMany?: Enumerable<paymentUpdateManyWithWhereWithoutCartInput>
    deleteMany?: Enumerable<paymentScalarWhereInput>
  }

  export type paymentUncheckedUpdateManyWithoutCartNestedInput = {
    create?: XOR<Enumerable<paymentCreateWithoutCartInput>, Enumerable<paymentUncheckedCreateWithoutCartInput>>
    connectOrCreate?: Enumerable<paymentCreateOrConnectWithoutCartInput>
    upsert?: Enumerable<paymentUpsertWithWhereUniqueWithoutCartInput>
    createMany?: paymentCreateManyCartInputEnvelope
    set?: Enumerable<paymentWhereUniqueInput>
    disconnect?: Enumerable<paymentWhereUniqueInput>
    delete?: Enumerable<paymentWhereUniqueInput>
    connect?: Enumerable<paymentWhereUniqueInput>
    update?: Enumerable<paymentUpdateWithWhereUniqueWithoutCartInput>
    updateMany?: Enumerable<paymentUpdateManyWithWhereWithoutCartInput>
    deleteMany?: Enumerable<paymentScalarWhereInput>
  }

  export type productCreateNestedOneWithoutPaymentInput = {
    create?: XOR<productCreateWithoutPaymentInput, productUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: productCreateOrConnectWithoutPaymentInput
    connect?: productWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutPaymentInput = {
    create?: XOR<usersCreateWithoutPaymentInput, usersUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: usersCreateOrConnectWithoutPaymentInput
    connect?: usersWhereUniqueInput
  }

  export type cartCreateNestedOneWithoutPaymentInput = {
    create?: XOR<cartCreateWithoutPaymentInput, cartUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: cartCreateOrConnectWithoutPaymentInput
    connect?: cartWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type productUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<productCreateWithoutPaymentInput, productUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: productCreateOrConnectWithoutPaymentInput
    upsert?: productUpsertWithoutPaymentInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutPaymentInput, productUncheckedUpdateWithoutPaymentInput>
  }

  export type usersUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<usersCreateWithoutPaymentInput, usersUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: usersCreateOrConnectWithoutPaymentInput
    upsert?: usersUpsertWithoutPaymentInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutPaymentInput, usersUncheckedUpdateWithoutPaymentInput>
  }

  export type cartUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<cartCreateWithoutPaymentInput, cartUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: cartCreateOrConnectWithoutPaymentInput
    upsert?: cartUpsertWithoutPaymentInput
    connect?: cartWhereUniqueInput
    update?: XOR<cartUpdateWithoutPaymentInput, cartUncheckedUpdateWithoutPaymentInput>
  }

  export type productCreateNestedManyWithoutSubCatagoryInput = {
    create?: XOR<Enumerable<productCreateWithoutSubCatagoryInput>, Enumerable<productUncheckedCreateWithoutSubCatagoryInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutSubCatagoryInput>
    createMany?: productCreateManySubCatagoryInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type catagoryCreateNestedOneWithoutSubCategorieInput = {
    create?: XOR<catagoryCreateWithoutSubCategorieInput, catagoryUncheckedCreateWithoutSubCategorieInput>
    connectOrCreate?: catagoryCreateOrConnectWithoutSubCategorieInput
    connect?: catagoryWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutSubCatagoryInput = {
    create?: XOR<usersCreateWithoutSubCatagoryInput, usersUncheckedCreateWithoutSubCatagoryInput>
    connectOrCreate?: usersCreateOrConnectWithoutSubCatagoryInput
    connect?: usersWhereUniqueInput
  }

  export type productUncheckedCreateNestedManyWithoutSubCatagoryInput = {
    create?: XOR<Enumerable<productCreateWithoutSubCatagoryInput>, Enumerable<productUncheckedCreateWithoutSubCatagoryInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutSubCatagoryInput>
    createMany?: productCreateManySubCatagoryInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type productUpdateManyWithoutSubCatagoryNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutSubCatagoryInput>, Enumerable<productUncheckedCreateWithoutSubCatagoryInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutSubCatagoryInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutSubCatagoryInput>
    createMany?: productCreateManySubCatagoryInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutSubCatagoryInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutSubCatagoryInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type catagoryUpdateOneRequiredWithoutSubCategorieNestedInput = {
    create?: XOR<catagoryCreateWithoutSubCategorieInput, catagoryUncheckedCreateWithoutSubCategorieInput>
    connectOrCreate?: catagoryCreateOrConnectWithoutSubCategorieInput
    upsert?: catagoryUpsertWithoutSubCategorieInput
    connect?: catagoryWhereUniqueInput
    update?: XOR<catagoryUpdateWithoutSubCategorieInput, catagoryUncheckedUpdateWithoutSubCategorieInput>
  }

  export type usersUpdateOneRequiredWithoutSubCatagoryNestedInput = {
    create?: XOR<usersCreateWithoutSubCatagoryInput, usersUncheckedCreateWithoutSubCatagoryInput>
    connectOrCreate?: usersCreateOrConnectWithoutSubCatagoryInput
    upsert?: usersUpsertWithoutSubCatagoryInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutSubCatagoryInput, usersUncheckedUpdateWithoutSubCatagoryInput>
  }

  export type productUncheckedUpdateManyWithoutSubCatagoryNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutSubCatagoryInput>, Enumerable<productUncheckedCreateWithoutSubCatagoryInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutSubCatagoryInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutSubCatagoryInput>
    createMany?: productCreateManySubCatagoryInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutSubCatagoryInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutSubCatagoryInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutCatagoryInput = {
    create?: XOR<usersCreateWithoutCatagoryInput, usersUncheckedCreateWithoutCatagoryInput>
    connectOrCreate?: usersCreateOrConnectWithoutCatagoryInput
    connect?: usersWhereUniqueInput
  }

  export type subCatagoryCreateNestedManyWithoutCatogoryInput = {
    create?: XOR<Enumerable<subCatagoryCreateWithoutCatogoryInput>, Enumerable<subCatagoryUncheckedCreateWithoutCatogoryInput>>
    connectOrCreate?: Enumerable<subCatagoryCreateOrConnectWithoutCatogoryInput>
    createMany?: subCatagoryCreateManyCatogoryInputEnvelope
    connect?: Enumerable<subCatagoryWhereUniqueInput>
  }

  export type subCatagoryUncheckedCreateNestedManyWithoutCatogoryInput = {
    create?: XOR<Enumerable<subCatagoryCreateWithoutCatogoryInput>, Enumerable<subCatagoryUncheckedCreateWithoutCatogoryInput>>
    connectOrCreate?: Enumerable<subCatagoryCreateOrConnectWithoutCatogoryInput>
    createMany?: subCatagoryCreateManyCatogoryInputEnvelope
    connect?: Enumerable<subCatagoryWhereUniqueInput>
  }

  export type usersUpdateOneRequiredWithoutCatagoryNestedInput = {
    create?: XOR<usersCreateWithoutCatagoryInput, usersUncheckedCreateWithoutCatagoryInput>
    connectOrCreate?: usersCreateOrConnectWithoutCatagoryInput
    upsert?: usersUpsertWithoutCatagoryInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCatagoryInput, usersUncheckedUpdateWithoutCatagoryInput>
  }

  export type subCatagoryUpdateManyWithoutCatogoryNestedInput = {
    create?: XOR<Enumerable<subCatagoryCreateWithoutCatogoryInput>, Enumerable<subCatagoryUncheckedCreateWithoutCatogoryInput>>
    connectOrCreate?: Enumerable<subCatagoryCreateOrConnectWithoutCatogoryInput>
    upsert?: Enumerable<subCatagoryUpsertWithWhereUniqueWithoutCatogoryInput>
    createMany?: subCatagoryCreateManyCatogoryInputEnvelope
    set?: Enumerable<subCatagoryWhereUniqueInput>
    disconnect?: Enumerable<subCatagoryWhereUniqueInput>
    delete?: Enumerable<subCatagoryWhereUniqueInput>
    connect?: Enumerable<subCatagoryWhereUniqueInput>
    update?: Enumerable<subCatagoryUpdateWithWhereUniqueWithoutCatogoryInput>
    updateMany?: Enumerable<subCatagoryUpdateManyWithWhereWithoutCatogoryInput>
    deleteMany?: Enumerable<subCatagoryScalarWhereInput>
  }

  export type subCatagoryUncheckedUpdateManyWithoutCatogoryNestedInput = {
    create?: XOR<Enumerable<subCatagoryCreateWithoutCatogoryInput>, Enumerable<subCatagoryUncheckedCreateWithoutCatogoryInput>>
    connectOrCreate?: Enumerable<subCatagoryCreateOrConnectWithoutCatogoryInput>
    upsert?: Enumerable<subCatagoryUpsertWithWhereUniqueWithoutCatogoryInput>
    createMany?: subCatagoryCreateManyCatogoryInputEnvelope
    set?: Enumerable<subCatagoryWhereUniqueInput>
    disconnect?: Enumerable<subCatagoryWhereUniqueInput>
    delete?: Enumerable<subCatagoryWhereUniqueInput>
    connect?: Enumerable<subCatagoryWhereUniqueInput>
    update?: Enumerable<subCatagoryUpdateWithWhereUniqueWithoutCatogoryInput>
    updateMany?: Enumerable<subCatagoryUpdateManyWithWhereWithoutCatogoryInput>
    deleteMany?: Enumerable<subCatagoryScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumRolesFilter = {
    equals?: Roles
    in?: Enumerable<Roles>
    notIn?: Enumerable<Roles>
    not?: NestedEnumRolesFilter | Roles
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumRolesWithAggregatesFilter = {
    equals?: Roles
    in?: Enumerable<Roles>
    notIn?: Enumerable<Roles>
    not?: NestedEnumRolesWithAggregatesFilter | Roles
    _count?: NestedIntFilter
    _min?: NestedEnumRolesFilter
    _max?: NestedEnumRolesFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type productCreateWithoutUsersInput = {
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    subCatagory: subCatagoryCreateNestedOneWithoutProductInput
    cart?: cartCreateNestedManyWithoutProductInput
    payment?: paymentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutUsersInput = {
    ProductId?: number
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    subatCagoryId: number
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    payment?: paymentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutUsersInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutUsersInput, productUncheckedCreateWithoutUsersInput>
  }

  export type productCreateManyUsersInputEnvelope = {
    data: Enumerable<productCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type cartCreateWithoutUsersInput = {
    qty: number
    product: productCreateNestedOneWithoutCartInput
    payment?: paymentCreateNestedManyWithoutCartInput
  }

  export type cartUncheckedCreateWithoutUsersInput = {
    cartId?: number
    qty: number
    ProductId: number
    payment?: paymentUncheckedCreateNestedManyWithoutCartInput
  }

  export type cartCreateOrConnectWithoutUsersInput = {
    where: cartWhereUniqueInput
    create: XOR<cartCreateWithoutUsersInput, cartUncheckedCreateWithoutUsersInput>
  }

  export type cartCreateManyUsersInputEnvelope = {
    data: Enumerable<cartCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type paymentCreateWithoutUsersInput = {
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    product: productCreateNestedOneWithoutPaymentInput
    cart: cartCreateNestedOneWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutUsersInput = {
    id?: number
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    ProductId: number
    cartId: number
  }

  export type paymentCreateOrConnectWithoutUsersInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutUsersInput, paymentUncheckedCreateWithoutUsersInput>
  }

  export type paymentCreateManyUsersInputEnvelope = {
    data: Enumerable<paymentCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type catagoryCreateWithoutUsersInput = {
    type: string
    subCategorie?: subCatagoryCreateNestedManyWithoutCatogoryInput
  }

  export type catagoryUncheckedCreateWithoutUsersInput = {
    CagoryId?: number
    type: string
    subCategorie?: subCatagoryUncheckedCreateNestedManyWithoutCatogoryInput
  }

  export type catagoryCreateOrConnectWithoutUsersInput = {
    where: catagoryWhereUniqueInput
    create: XOR<catagoryCreateWithoutUsersInput, catagoryUncheckedCreateWithoutUsersInput>
  }

  export type catagoryCreateManyUsersInputEnvelope = {
    data: Enumerable<catagoryCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type subCatagoryCreateWithoutUserInput = {
    type: string
    img: string
    Product?: productCreateNestedManyWithoutSubCatagoryInput
    catogory: catagoryCreateNestedOneWithoutSubCategorieInput
  }

  export type subCatagoryUncheckedCreateWithoutUserInput = {
    subatCagoryId?: number
    type: string
    img: string
    CagoryId: number
    Product?: productUncheckedCreateNestedManyWithoutSubCatagoryInput
  }

  export type subCatagoryCreateOrConnectWithoutUserInput = {
    where: subCatagoryWhereUniqueInput
    create: XOR<subCatagoryCreateWithoutUserInput, subCatagoryUncheckedCreateWithoutUserInput>
  }

  export type subCatagoryCreateManyUserInputEnvelope = {
    data: Enumerable<subCatagoryCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type productUpsertWithWhereUniqueWithoutUsersInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutUsersInput, productUncheckedUpdateWithoutUsersInput>
    create: XOR<productCreateWithoutUsersInput, productUncheckedCreateWithoutUsersInput>
  }

  export type productUpdateWithWhereUniqueWithoutUsersInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutUsersInput, productUncheckedUpdateWithoutUsersInput>
  }

  export type productUpdateManyWithWhereWithoutUsersInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductInput>
  }

  export type productScalarWhereInput = {
    AND?: Enumerable<productScalarWhereInput>
    OR?: Enumerable<productScalarWhereInput>
    NOT?: Enumerable<productScalarWhereInput>
    ProductId?: IntFilter | number
    title?: StringFilter | string
    Description?: StringNullableFilter | string | null
    Price?: StringFilter | string
    img?: StringFilter | string
    Store?: StringFilter | string
    userId?: IntFilter | number
    subatCagoryId?: IntFilter | number
  }

  export type cartUpsertWithWhereUniqueWithoutUsersInput = {
    where: cartWhereUniqueInput
    update: XOR<cartUpdateWithoutUsersInput, cartUncheckedUpdateWithoutUsersInput>
    create: XOR<cartCreateWithoutUsersInput, cartUncheckedCreateWithoutUsersInput>
  }

  export type cartUpdateWithWhereUniqueWithoutUsersInput = {
    where: cartWhereUniqueInput
    data: XOR<cartUpdateWithoutUsersInput, cartUncheckedUpdateWithoutUsersInput>
  }

  export type cartUpdateManyWithWhereWithoutUsersInput = {
    where: cartScalarWhereInput
    data: XOR<cartUpdateManyMutationInput, cartUncheckedUpdateManyWithoutCartInput>
  }

  export type cartScalarWhereInput = {
    AND?: Enumerable<cartScalarWhereInput>
    OR?: Enumerable<cartScalarWhereInput>
    NOT?: Enumerable<cartScalarWhereInput>
    cartId?: IntFilter | number
    qty?: IntFilter | number
    userId?: IntFilter | number
    ProductId?: IntFilter | number
  }

  export type paymentUpsertWithWhereUniqueWithoutUsersInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutUsersInput, paymentUncheckedUpdateWithoutUsersInput>
    create: XOR<paymentCreateWithoutUsersInput, paymentUncheckedCreateWithoutUsersInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutUsersInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutUsersInput, paymentUncheckedUpdateWithoutUsersInput>
  }

  export type paymentUpdateManyWithWhereWithoutUsersInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutPaymentInput>
  }

  export type paymentScalarWhereInput = {
    AND?: Enumerable<paymentScalarWhereInput>
    OR?: Enumerable<paymentScalarWhereInput>
    NOT?: Enumerable<paymentScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    createAt?: IntNullableFilter | number | null
    is_paid?: BoolFilter | boolean
    is_deliveredn?: BoolFilter | boolean
    ProductId?: IntFilter | number
    cartId?: IntFilter | number
  }

  export type catagoryUpsertWithWhereUniqueWithoutUsersInput = {
    where: catagoryWhereUniqueInput
    update: XOR<catagoryUpdateWithoutUsersInput, catagoryUncheckedUpdateWithoutUsersInput>
    create: XOR<catagoryCreateWithoutUsersInput, catagoryUncheckedCreateWithoutUsersInput>
  }

  export type catagoryUpdateWithWhereUniqueWithoutUsersInput = {
    where: catagoryWhereUniqueInput
    data: XOR<catagoryUpdateWithoutUsersInput, catagoryUncheckedUpdateWithoutUsersInput>
  }

  export type catagoryUpdateManyWithWhereWithoutUsersInput = {
    where: catagoryScalarWhereInput
    data: XOR<catagoryUpdateManyMutationInput, catagoryUncheckedUpdateManyWithoutCatagoryInput>
  }

  export type catagoryScalarWhereInput = {
    AND?: Enumerable<catagoryScalarWhereInput>
    OR?: Enumerable<catagoryScalarWhereInput>
    NOT?: Enumerable<catagoryScalarWhereInput>
    CagoryId?: IntFilter | number
    type?: StringFilter | string
    userId?: IntFilter | number
  }

  export type subCatagoryUpsertWithWhereUniqueWithoutUserInput = {
    where: subCatagoryWhereUniqueInput
    update: XOR<subCatagoryUpdateWithoutUserInput, subCatagoryUncheckedUpdateWithoutUserInput>
    create: XOR<subCatagoryCreateWithoutUserInput, subCatagoryUncheckedCreateWithoutUserInput>
  }

  export type subCatagoryUpdateWithWhereUniqueWithoutUserInput = {
    where: subCatagoryWhereUniqueInput
    data: XOR<subCatagoryUpdateWithoutUserInput, subCatagoryUncheckedUpdateWithoutUserInput>
  }

  export type subCatagoryUpdateManyWithWhereWithoutUserInput = {
    where: subCatagoryScalarWhereInput
    data: XOR<subCatagoryUpdateManyMutationInput, subCatagoryUncheckedUpdateManyWithoutSubCatagoryInput>
  }

  export type subCatagoryScalarWhereInput = {
    AND?: Enumerable<subCatagoryScalarWhereInput>
    OR?: Enumerable<subCatagoryScalarWhereInput>
    NOT?: Enumerable<subCatagoryScalarWhereInput>
    subatCagoryId?: IntFilter | number
    type?: StringFilter | string
    img?: StringFilter | string
    CagoryId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type usersCreateWithoutProductInput = {
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    cart?: cartCreateNestedManyWithoutUsersInput
    payment?: paymentCreateNestedManyWithoutUsersInput
    catagory?: catagoryCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutProductInput = {
    userId?: number
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    cart?: cartUncheckedCreateNestedManyWithoutUsersInput
    payment?: paymentUncheckedCreateNestedManyWithoutUsersInput
    catagory?: catagoryUncheckedCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutProductInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutProductInput, usersUncheckedCreateWithoutProductInput>
  }

  export type subCatagoryCreateWithoutProductInput = {
    type: string
    img: string
    catogory: catagoryCreateNestedOneWithoutSubCategorieInput
    user: usersCreateNestedOneWithoutSubCatagoryInput
  }

  export type subCatagoryUncheckedCreateWithoutProductInput = {
    subatCagoryId?: number
    type: string
    img: string
    CagoryId: number
    userId: number
  }

  export type subCatagoryCreateOrConnectWithoutProductInput = {
    where: subCatagoryWhereUniqueInput
    create: XOR<subCatagoryCreateWithoutProductInput, subCatagoryUncheckedCreateWithoutProductInput>
  }

  export type cartCreateWithoutProductInput = {
    qty: number
    users: usersCreateNestedOneWithoutCartInput
    payment?: paymentCreateNestedManyWithoutCartInput
  }

  export type cartUncheckedCreateWithoutProductInput = {
    cartId?: number
    qty: number
    userId: number
    payment?: paymentUncheckedCreateNestedManyWithoutCartInput
  }

  export type cartCreateOrConnectWithoutProductInput = {
    where: cartWhereUniqueInput
    create: XOR<cartCreateWithoutProductInput, cartUncheckedCreateWithoutProductInput>
  }

  export type cartCreateManyProductInputEnvelope = {
    data: Enumerable<cartCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type paymentCreateWithoutProductInput = {
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    users: usersCreateNestedOneWithoutPaymentInput
    cart: cartCreateNestedOneWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutProductInput = {
    id?: number
    userId: number
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    cartId: number
  }

  export type paymentCreateOrConnectWithoutProductInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutProductInput, paymentUncheckedCreateWithoutProductInput>
  }

  export type paymentCreateManyProductInputEnvelope = {
    data: Enumerable<paymentCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutProductInput = {
    update: XOR<usersUpdateWithoutProductInput, usersUncheckedUpdateWithoutProductInput>
    create: XOR<usersCreateWithoutProductInput, usersUncheckedCreateWithoutProductInput>
  }

  export type usersUpdateWithoutProductInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    cart?: cartUpdateManyWithoutUsersNestedInput
    payment?: paymentUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutProductInput = {
    userId?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    cart?: cartUncheckedUpdateManyWithoutUsersNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUncheckedUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type subCatagoryUpsertWithoutProductInput = {
    update: XOR<subCatagoryUpdateWithoutProductInput, subCatagoryUncheckedUpdateWithoutProductInput>
    create: XOR<subCatagoryCreateWithoutProductInput, subCatagoryUncheckedCreateWithoutProductInput>
  }

  export type subCatagoryUpdateWithoutProductInput = {
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    catogory?: catagoryUpdateOneRequiredWithoutSubCategorieNestedInput
    user?: usersUpdateOneRequiredWithoutSubCatagoryNestedInput
  }

  export type subCatagoryUncheckedUpdateWithoutProductInput = {
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    CagoryId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type cartUpsertWithWhereUniqueWithoutProductInput = {
    where: cartWhereUniqueInput
    update: XOR<cartUpdateWithoutProductInput, cartUncheckedUpdateWithoutProductInput>
    create: XOR<cartCreateWithoutProductInput, cartUncheckedCreateWithoutProductInput>
  }

  export type cartUpdateWithWhereUniqueWithoutProductInput = {
    where: cartWhereUniqueInput
    data: XOR<cartUpdateWithoutProductInput, cartUncheckedUpdateWithoutProductInput>
  }

  export type cartUpdateManyWithWhereWithoutProductInput = {
    where: cartScalarWhereInput
    data: XOR<cartUpdateManyMutationInput, cartUncheckedUpdateManyWithoutCartInput>
  }

  export type paymentUpsertWithWhereUniqueWithoutProductInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutProductInput, paymentUncheckedUpdateWithoutProductInput>
    create: XOR<paymentCreateWithoutProductInput, paymentUncheckedCreateWithoutProductInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutProductInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutProductInput, paymentUncheckedUpdateWithoutProductInput>
  }

  export type paymentUpdateManyWithWhereWithoutProductInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutPaymentInput>
  }

  export type usersCreateWithoutCartInput = {
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productCreateNestedManyWithoutUsersInput
    payment?: paymentCreateNestedManyWithoutUsersInput
    catagory?: catagoryCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutCartInput = {
    userId?: number
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productUncheckedCreateNestedManyWithoutUsersInput
    payment?: paymentUncheckedCreateNestedManyWithoutUsersInput
    catagory?: catagoryUncheckedCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutCartInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCartInput, usersUncheckedCreateWithoutCartInput>
  }

  export type productCreateWithoutCartInput = {
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    users: usersCreateNestedOneWithoutProductInput
    subCatagory: subCatagoryCreateNestedOneWithoutProductInput
    payment?: paymentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutCartInput = {
    ProductId?: number
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    userId: number
    subatCagoryId: number
    payment?: paymentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutCartInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutCartInput, productUncheckedCreateWithoutCartInput>
  }

  export type paymentCreateWithoutCartInput = {
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    product: productCreateNestedOneWithoutPaymentInput
    users: usersCreateNestedOneWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutCartInput = {
    id?: number
    userId: number
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    ProductId: number
  }

  export type paymentCreateOrConnectWithoutCartInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutCartInput, paymentUncheckedCreateWithoutCartInput>
  }

  export type paymentCreateManyCartInputEnvelope = {
    data: Enumerable<paymentCreateManyCartInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutCartInput = {
    update: XOR<usersUpdateWithoutCartInput, usersUncheckedUpdateWithoutCartInput>
    create: XOR<usersCreateWithoutCartInput, usersUncheckedCreateWithoutCartInput>
  }

  export type usersUpdateWithoutCartInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUpdateManyWithoutUsersNestedInput
    payment?: paymentUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutCartInput = {
    userId?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUncheckedUpdateManyWithoutUsersNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUncheckedUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productUpsertWithoutCartInput = {
    update: XOR<productUpdateWithoutCartInput, productUncheckedUpdateWithoutCartInput>
    create: XOR<productCreateWithoutCartInput, productUncheckedCreateWithoutCartInput>
  }

  export type productUpdateWithoutCartInput = {
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutProductNestedInput
    subCatagory?: subCatagoryUpdateOneRequiredWithoutProductNestedInput
    payment?: paymentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutCartInput = {
    ProductId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    payment?: paymentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type paymentUpsertWithWhereUniqueWithoutCartInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutCartInput, paymentUncheckedUpdateWithoutCartInput>
    create: XOR<paymentCreateWithoutCartInput, paymentUncheckedCreateWithoutCartInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutCartInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutCartInput, paymentUncheckedUpdateWithoutCartInput>
  }

  export type paymentUpdateManyWithWhereWithoutCartInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutPaymentInput>
  }

  export type productCreateWithoutPaymentInput = {
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    users: usersCreateNestedOneWithoutProductInput
    subCatagory: subCatagoryCreateNestedOneWithoutProductInput
    cart?: cartCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutPaymentInput = {
    ProductId?: number
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    userId: number
    subatCagoryId: number
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutPaymentInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutPaymentInput, productUncheckedCreateWithoutPaymentInput>
  }

  export type usersCreateWithoutPaymentInput = {
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productCreateNestedManyWithoutUsersInput
    cart?: cartCreateNestedManyWithoutUsersInput
    catagory?: catagoryCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutPaymentInput = {
    userId?: number
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productUncheckedCreateNestedManyWithoutUsersInput
    cart?: cartUncheckedCreateNestedManyWithoutUsersInput
    catagory?: catagoryUncheckedCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutPaymentInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPaymentInput, usersUncheckedCreateWithoutPaymentInput>
  }

  export type cartCreateWithoutPaymentInput = {
    qty: number
    users: usersCreateNestedOneWithoutCartInput
    product: productCreateNestedOneWithoutCartInput
  }

  export type cartUncheckedCreateWithoutPaymentInput = {
    cartId?: number
    qty: number
    userId: number
    ProductId: number
  }

  export type cartCreateOrConnectWithoutPaymentInput = {
    where: cartWhereUniqueInput
    create: XOR<cartCreateWithoutPaymentInput, cartUncheckedCreateWithoutPaymentInput>
  }

  export type productUpsertWithoutPaymentInput = {
    update: XOR<productUpdateWithoutPaymentInput, productUncheckedUpdateWithoutPaymentInput>
    create: XOR<productCreateWithoutPaymentInput, productUncheckedCreateWithoutPaymentInput>
  }

  export type productUpdateWithoutPaymentInput = {
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutProductNestedInput
    subCatagory?: subCatagoryUpdateOneRequiredWithoutProductNestedInput
    cart?: cartUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutPaymentInput = {
    ProductId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
  }

  export type usersUpsertWithoutPaymentInput = {
    update: XOR<usersUpdateWithoutPaymentInput, usersUncheckedUpdateWithoutPaymentInput>
    create: XOR<usersCreateWithoutPaymentInput, usersUncheckedCreateWithoutPaymentInput>
  }

  export type usersUpdateWithoutPaymentInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUpdateManyWithoutUsersNestedInput
    cart?: cartUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutPaymentInput = {
    userId?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUncheckedUpdateManyWithoutUsersNestedInput
    cart?: cartUncheckedUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUncheckedUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type cartUpsertWithoutPaymentInput = {
    update: XOR<cartUpdateWithoutPaymentInput, cartUncheckedUpdateWithoutPaymentInput>
    create: XOR<cartCreateWithoutPaymentInput, cartUncheckedCreateWithoutPaymentInput>
  }

  export type cartUpdateWithoutPaymentInput = {
    qty?: IntFieldUpdateOperationsInput | number
    users?: usersUpdateOneRequiredWithoutCartNestedInput
    product?: productUpdateOneRequiredWithoutCartNestedInput
  }

  export type cartUncheckedUpdateWithoutPaymentInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    ProductId?: IntFieldUpdateOperationsInput | number
  }

  export type productCreateWithoutSubCatagoryInput = {
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    users: usersCreateNestedOneWithoutProductInput
    cart?: cartCreateNestedManyWithoutProductInput
    payment?: paymentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutSubCatagoryInput = {
    ProductId?: number
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    userId: number
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    payment?: paymentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutSubCatagoryInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutSubCatagoryInput, productUncheckedCreateWithoutSubCatagoryInput>
  }

  export type productCreateManySubCatagoryInputEnvelope = {
    data: Enumerable<productCreateManySubCatagoryInput>
    skipDuplicates?: boolean
  }

  export type catagoryCreateWithoutSubCategorieInput = {
    type: string
    users: usersCreateNestedOneWithoutCatagoryInput
  }

  export type catagoryUncheckedCreateWithoutSubCategorieInput = {
    CagoryId?: number
    type: string
    userId: number
  }

  export type catagoryCreateOrConnectWithoutSubCategorieInput = {
    where: catagoryWhereUniqueInput
    create: XOR<catagoryCreateWithoutSubCategorieInput, catagoryUncheckedCreateWithoutSubCategorieInput>
  }

  export type usersCreateWithoutSubCatagoryInput = {
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productCreateNestedManyWithoutUsersInput
    cart?: cartCreateNestedManyWithoutUsersInput
    payment?: paymentCreateNestedManyWithoutUsersInput
    catagory?: catagoryCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutSubCatagoryInput = {
    userId?: number
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productUncheckedCreateNestedManyWithoutUsersInput
    cart?: cartUncheckedCreateNestedManyWithoutUsersInput
    payment?: paymentUncheckedCreateNestedManyWithoutUsersInput
    catagory?: catagoryUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutSubCatagoryInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSubCatagoryInput, usersUncheckedCreateWithoutSubCatagoryInput>
  }

  export type productUpsertWithWhereUniqueWithoutSubCatagoryInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutSubCatagoryInput, productUncheckedUpdateWithoutSubCatagoryInput>
    create: XOR<productCreateWithoutSubCatagoryInput, productUncheckedCreateWithoutSubCatagoryInput>
  }

  export type productUpdateWithWhereUniqueWithoutSubCatagoryInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutSubCatagoryInput, productUncheckedUpdateWithoutSubCatagoryInput>
  }

  export type productUpdateManyWithWhereWithoutSubCatagoryInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductInput>
  }

  export type catagoryUpsertWithoutSubCategorieInput = {
    update: XOR<catagoryUpdateWithoutSubCategorieInput, catagoryUncheckedUpdateWithoutSubCategorieInput>
    create: XOR<catagoryCreateWithoutSubCategorieInput, catagoryUncheckedCreateWithoutSubCategorieInput>
  }

  export type catagoryUpdateWithoutSubCategorieInput = {
    type?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutCatagoryNestedInput
  }

  export type catagoryUncheckedUpdateWithoutSubCategorieInput = {
    CagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type usersUpsertWithoutSubCatagoryInput = {
    update: XOR<usersUpdateWithoutSubCatagoryInput, usersUncheckedUpdateWithoutSubCatagoryInput>
    create: XOR<usersCreateWithoutSubCatagoryInput, usersUncheckedCreateWithoutSubCatagoryInput>
  }

  export type usersUpdateWithoutSubCatagoryInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUpdateManyWithoutUsersNestedInput
    cart?: cartUpdateManyWithoutUsersNestedInput
    payment?: paymentUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutSubCatagoryInput = {
    userId?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUncheckedUpdateManyWithoutUsersNestedInput
    cart?: cartUncheckedUpdateManyWithoutUsersNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUsersNestedInput
    catagory?: catagoryUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutCatagoryInput = {
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productCreateNestedManyWithoutUsersInput
    cart?: cartCreateNestedManyWithoutUsersInput
    payment?: paymentCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutCatagoryInput = {
    userId?: number
    FirstName: string
    LastName: string
    Address?: string | null
    Email: string
    Password: string
    Role?: Roles
    product?: productUncheckedCreateNestedManyWithoutUsersInput
    cart?: cartUncheckedCreateNestedManyWithoutUsersInput
    payment?: paymentUncheckedCreateNestedManyWithoutUsersInput
    subCatagory?: subCatagoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutCatagoryInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCatagoryInput, usersUncheckedCreateWithoutCatagoryInput>
  }

  export type subCatagoryCreateWithoutCatogoryInput = {
    type: string
    img: string
    Product?: productCreateNestedManyWithoutSubCatagoryInput
    user: usersCreateNestedOneWithoutSubCatagoryInput
  }

  export type subCatagoryUncheckedCreateWithoutCatogoryInput = {
    subatCagoryId?: number
    type: string
    img: string
    Product?: productUncheckedCreateNestedManyWithoutSubCatagoryInput
    userId: number
  }

  export type subCatagoryCreateOrConnectWithoutCatogoryInput = {
    where: subCatagoryWhereUniqueInput
    create: XOR<subCatagoryCreateWithoutCatogoryInput, subCatagoryUncheckedCreateWithoutCatogoryInput>
  }

  export type subCatagoryCreateManyCatogoryInputEnvelope = {
    data: Enumerable<subCatagoryCreateManyCatogoryInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutCatagoryInput = {
    update: XOR<usersUpdateWithoutCatagoryInput, usersUncheckedUpdateWithoutCatagoryInput>
    create: XOR<usersCreateWithoutCatagoryInput, usersUncheckedCreateWithoutCatagoryInput>
  }

  export type usersUpdateWithoutCatagoryInput = {
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUpdateManyWithoutUsersNestedInput
    cart?: cartUpdateManyWithoutUsersNestedInput
    payment?: paymentUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutCatagoryInput = {
    userId?: IntFieldUpdateOperationsInput | number
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: EnumRolesFieldUpdateOperationsInput | Roles
    product?: productUncheckedUpdateManyWithoutUsersNestedInput
    cart?: cartUncheckedUpdateManyWithoutUsersNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUsersNestedInput
    subCatagory?: subCatagoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type subCatagoryUpsertWithWhereUniqueWithoutCatogoryInput = {
    where: subCatagoryWhereUniqueInput
    update: XOR<subCatagoryUpdateWithoutCatogoryInput, subCatagoryUncheckedUpdateWithoutCatogoryInput>
    create: XOR<subCatagoryCreateWithoutCatogoryInput, subCatagoryUncheckedCreateWithoutCatogoryInput>
  }

  export type subCatagoryUpdateWithWhereUniqueWithoutCatogoryInput = {
    where: subCatagoryWhereUniqueInput
    data: XOR<subCatagoryUpdateWithoutCatogoryInput, subCatagoryUncheckedUpdateWithoutCatogoryInput>
  }

  export type subCatagoryUpdateManyWithWhereWithoutCatogoryInput = {
    where: subCatagoryScalarWhereInput
    data: XOR<subCatagoryUpdateManyMutationInput, subCatagoryUncheckedUpdateManyWithoutSubCategorieInput>
  }

  export type productCreateManyUsersInput = {
    ProductId?: number
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    subatCagoryId: number
  }

  export type cartCreateManyUsersInput = {
    cartId?: number
    qty: number
    ProductId: number
  }

  export type paymentCreateManyUsersInput = {
    id?: number
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    ProductId: number
    cartId: number
  }

  export type catagoryCreateManyUsersInput = {
    CagoryId?: number
    type: string
  }

  export type subCatagoryCreateManyUserInput = {
    subatCagoryId?: number
    type: string
    img: string
    CagoryId: number
  }

  export type productUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    subCatagory?: subCatagoryUpdateOneRequiredWithoutProductNestedInput
    cart?: cartUpdateManyWithoutProductNestedInput
    payment?: paymentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutUsersInput = {
    ProductId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    payment?: paymentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutProductInput = {
    ProductId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    subatCagoryId?: IntFieldUpdateOperationsInput | number
  }

  export type cartUpdateWithoutUsersInput = {
    qty?: IntFieldUpdateOperationsInput | number
    product?: productUpdateOneRequiredWithoutCartNestedInput
    payment?: paymentUpdateManyWithoutCartNestedInput
  }

  export type cartUncheckedUpdateWithoutUsersInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    ProductId?: IntFieldUpdateOperationsInput | number
    payment?: paymentUncheckedUpdateManyWithoutCartNestedInput
  }

  export type cartUncheckedUpdateManyWithoutCartInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    ProductId?: IntFieldUpdateOperationsInput | number
  }

  export type paymentUpdateWithoutUsersInput = {
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    product?: productUpdateOneRequiredWithoutPaymentNestedInput
    cart?: cartUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    ProductId?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
  }

  export type paymentUncheckedUpdateManyWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    ProductId?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
  }

  export type catagoryUpdateWithoutUsersInput = {
    type?: StringFieldUpdateOperationsInput | string
    subCategorie?: subCatagoryUpdateManyWithoutCatogoryNestedInput
  }

  export type catagoryUncheckedUpdateWithoutUsersInput = {
    CagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    subCategorie?: subCatagoryUncheckedUpdateManyWithoutCatogoryNestedInput
  }

  export type catagoryUncheckedUpdateManyWithoutCatagoryInput = {
    CagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type subCatagoryUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Product?: productUpdateManyWithoutSubCatagoryNestedInput
    catogory?: catagoryUpdateOneRequiredWithoutSubCategorieNestedInput
  }

  export type subCatagoryUncheckedUpdateWithoutUserInput = {
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    CagoryId?: IntFieldUpdateOperationsInput | number
    Product?: productUncheckedUpdateManyWithoutSubCatagoryNestedInput
  }

  export type subCatagoryUncheckedUpdateManyWithoutSubCatagoryInput = {
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    CagoryId?: IntFieldUpdateOperationsInput | number
  }

  export type cartCreateManyProductInput = {
    cartId?: number
    qty: number
    userId: number
  }

  export type paymentCreateManyProductInput = {
    id?: number
    userId: number
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    cartId: number
  }

  export type cartUpdateWithoutProductInput = {
    qty?: IntFieldUpdateOperationsInput | number
    users?: usersUpdateOneRequiredWithoutCartNestedInput
    payment?: paymentUpdateManyWithoutCartNestedInput
  }

  export type cartUncheckedUpdateWithoutProductInput = {
    cartId?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    payment?: paymentUncheckedUpdateManyWithoutCartNestedInput
  }

  export type paymentUpdateWithoutProductInput = {
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateOneRequiredWithoutPaymentNestedInput
    cart?: cartUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    cartId?: IntFieldUpdateOperationsInput | number
  }

  export type paymentCreateManyCartInput = {
    id?: number
    userId: number
    createAt?: number | null
    is_paid?: boolean
    is_deliveredn?: boolean
    ProductId: number
  }

  export type paymentUpdateWithoutCartInput = {
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    product?: productUpdateOneRequiredWithoutPaymentNestedInput
    users?: usersUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutCartInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createAt?: NullableIntFieldUpdateOperationsInput | number | null
    is_paid?: BoolFieldUpdateOperationsInput | boolean
    is_deliveredn?: BoolFieldUpdateOperationsInput | boolean
    ProductId?: IntFieldUpdateOperationsInput | number
  }

  export type productCreateManySubCatagoryInput = {
    ProductId?: number
    title: string
    Description?: string | null
    Price: string
    img: string
    Store: string
    userId: number
  }

  export type productUpdateWithoutSubCatagoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutProductNestedInput
    cart?: cartUpdateManyWithoutProductNestedInput
    payment?: paymentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutSubCatagoryInput = {
    ProductId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    Price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Store?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    payment?: paymentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type subCatagoryCreateManyCatogoryInput = {
    subatCagoryId?: number
    type: string
    img: string
    userId: number
  }

  export type subCatagoryUpdateWithoutCatogoryInput = {
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Product?: productUpdateManyWithoutSubCatagoryNestedInput
    user?: usersUpdateOneRequiredWithoutSubCatagoryNestedInput
  }

  export type subCatagoryUncheckedUpdateWithoutCatogoryInput = {
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    Product?: productUncheckedUpdateManyWithoutSubCatagoryNestedInput
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type subCatagoryUncheckedUpdateManyWithoutSubCategorieInput = {
    subatCagoryId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}